"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("src_utils_pdfGenerator_ts",{

/***/ "./src/utils/pdfGenerator.ts":
/*!***********************************!*\
  !*** ./src/utils/pdfGenerator.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generatePDFReport: function() { return /* binding */ generatePDFReport; }\n/* harmony export */ });\n/* harmony import */ var jspdf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jspdf */ \"./node_modules/jspdf/dist/jspdf.es.min.js\");\n/* harmony import */ var jspdf_autotable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jspdf-autotable */ \"./node_modules/jspdf-autotable/dist/jspdf.plugin.autotable.mjs\");\n\n\n/**\n * Generate a PDF report from scan data\n * @param scan The scan details\n * @param vulnerabilities List of vulnerabilities found in the scan\n * @returns Blob containing the PDF document\n */ const generatePDFReport = function(scan) {\n    let vulnerabilities = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n    // Initialize PDF document\n    const doc = new jspdf__WEBPACK_IMPORTED_MODULE_0__.jsPDF();\n    const pageWidth = doc.internal.pageSize.getWidth();\n    // Add report title\n    doc.setFontSize(20);\n    doc.setTextColor(0, 51, 102); // Dark blue color\n    doc.text(\"Website Security Scan Report\", pageWidth / 2, 20, {\n        align: \"center\"\n    });\n    // Add scan information\n    doc.setFontSize(12);\n    doc.setTextColor(0, 0, 0); // Black color\n    doc.text(\"URL: \".concat(scan.url || scan.target || \"N/A\"), 14, 35);\n    doc.text(\"Scan Type: \".concat(scan.scan_type ? scan.scan_type.charAt(0).toUpperCase() + scan.scan_type.slice(1) : \"N/A\"), 14, 42);\n    doc.text(\"Status: \".concat(scan.status.charAt(0).toUpperCase() + scan.status.slice(1)), 14, 49);\n    doc.text(\"Date: \".concat(scan.created_at ? new Date(scan.created_at).toLocaleString() : \"N/A\"), 14, 56);\n    // Handle different time field names\n    const startTimeValue = scan.start_time || scan.started_at;\n    const endTimeValue = scan.end_time || scan.completed_at;\n    if (startTimeValue && endTimeValue) {\n        const startTime = new Date(startTimeValue);\n        const endTime = new Date(endTimeValue);\n        doc.text(\"Duration: \".concat(((endTime.getTime() - startTime.getTime()) / 1000 / 60).toFixed(2), \" minutes\"), 14, 63);\n    }\n    // Add summary section\n    doc.setFontSize(16);\n    doc.setTextColor(0, 51, 102); // Dark blue color\n    doc.text(\"Summary\", 14, 75);\n    if (scan.summary) {\n        doc.setFontSize(12);\n        doc.setTextColor(0, 0, 0); // Black color\n        doc.text(\"Total Vulnerabilities: \".concat(scan.summary.total_vulnerabilities), 14, 85);\n        // Add severity counts\n        if (scan.summary.severity_counts) {\n            const severityCounts = scan.summary.severity_counts;\n            // Create a table for severity counts\n            (0,jspdf_autotable__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(doc, {\n                startY: 95,\n                head: [\n                    [\n                        \"Severity\",\n                        \"Count\"\n                    ]\n                ],\n                body: [\n                    [\n                        \"Critical\",\n                        severityCounts.critical.toString()\n                    ],\n                    [\n                        \"High\",\n                        severityCounts.high.toString()\n                    ],\n                    [\n                        \"Medium\",\n                        severityCounts.medium.toString()\n                    ],\n                    [\n                        \"Low\",\n                        severityCounts.low.toString()\n                    ],\n                    [\n                        \"Info\",\n                        severityCounts.info.toString()\n                    ]\n                ],\n                theme: \"striped\",\n                headStyles: {\n                    fillColor: [\n                        0,\n                        51,\n                        102\n                    ]\n                },\n                columnStyles: {\n                    0: {\n                        cellWidth: 40\n                    },\n                    1: {\n                        cellWidth: 40,\n                        halign: \"center\"\n                    }\n                }\n            });\n        }\n    }\n    // Add vulnerabilities section if there are any\n    if (vulnerabilities.length > 0) {\n        // Get the position after the last table or use default value\n        const currentY = doc.previousAutoTable ? doc.previousAutoTable.finalY + 15 : 150;\n        doc.setFontSize(16);\n        doc.setTextColor(0, 51, 102); // Dark blue color\n        doc.text(\"Vulnerabilities\", 14, currentY);\n        // Create a table for vulnerabilities\n        const tableRows = vulnerabilities.map((vuln)=>[\n                vuln.name,\n                vuln.severity.charAt(0).toUpperCase() + vuln.severity.slice(1),\n                vuln.location,\n                vuln.description.length > 50 ? vuln.description.substring(0, 50) + \"...\" : vuln.description\n            ]);\n        (0,jspdf_autotable__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(doc, {\n            startY: currentY + 10,\n            head: [\n                [\n                    \"Name\",\n                    \"Severity\",\n                    \"Location\",\n                    \"Description\"\n                ]\n            ],\n            body: tableRows,\n            theme: \"striped\",\n            headStyles: {\n                fillColor: [\n                    0,\n                    51,\n                    102\n                ]\n            },\n            columnStyles: {\n                0: {\n                    cellWidth: 40\n                },\n                1: {\n                    cellWidth: 30\n                },\n                2: {\n                    cellWidth: 40\n                },\n                3: {\n                    cellWidth: \"auto\"\n                }\n            },\n            didDrawPage: (data)=>{\n                // Add page number at the bottom\n                const pageNumber = doc.getNumberOfPages();\n                doc.setFontSize(10);\n                doc.text(\"Page \".concat(pageNumber), pageWidth - 20, doc.internal.pageSize.getHeight() - 10);\n            }\n        });\n        // Add detailed vulnerability information\n        vulnerabilities.forEach((vuln, index)=>{\n            doc.addPage();\n            // Add page number\n            const pageNumber = doc.getNumberOfPages();\n            doc.setFontSize(10);\n            doc.text(\"Page \".concat(pageNumber), pageWidth - 20, doc.internal.pageSize.getHeight() - 10);\n            // Add vulnerability details\n            doc.setFontSize(16);\n            doc.setTextColor(0, 51, 102); // Dark blue color\n            doc.text(\"Vulnerability #\".concat(index + 1, \": \").concat(vuln.name), 14, 20);\n            doc.setFontSize(12);\n            doc.setTextColor(0, 0, 0); // Black color\n            doc.text(\"Severity: \".concat(vuln.severity.charAt(0).toUpperCase() + vuln.severity.slice(1)), 14, 30);\n            doc.text(\"Location: \".concat(vuln.location), 14, 37);\n            if (vuln.cwe_id) {\n                doc.text(\"CWE ID: \".concat(vuln.cwe_id), 14, 44);\n            }\n            if (vuln.cvss_score) {\n                doc.text(\"CVSS Score: \".concat(vuln.cvss_score), 14, 51);\n            }\n            // Description with word wrap\n            doc.setFontSize(12);\n            doc.text(\"Description:\", 14, 58);\n            const splitDescription = doc.splitTextToSize(vuln.description, pageWidth - 28);\n            doc.text(splitDescription, 14, 65);\n            let currentYPosition = 65 + splitDescription.length * 7;\n            // Evidence with word wrap if available\n            if (vuln.evidence) {\n                doc.text(\"Evidence:\", 14, currentYPosition);\n                const splitEvidence = doc.splitTextToSize(vuln.evidence, pageWidth - 28);\n                doc.text(splitEvidence, 14, currentYPosition + 7);\n                currentYPosition += 7 + splitEvidence.length * 7;\n            }\n            // Enhanced remediation section with structured format\n            if (vuln.remediation) {\n                // Main remediation heading\n                doc.setFontSize(14);\n                doc.setTextColor(0, 51, 102); // Dark blue color\n                doc.text(\"Remediation:\", 14, currentYPosition);\n                currentYPosition += 10;\n                // Reset to normal text style\n                doc.setFontSize(12);\n                doc.setTextColor(0, 0, 0); // Black color\n                // Parse the remediation text to identify sections\n                const remediationText = vuln.remediation;\n                // Check if the remediation text contains structured sections\n                if (remediationText.includes(\"#### 1. Importance of Fixing\")) {\n                    // For structured remediation format\n                    const sections = remediationText.split(/####\\s+\\d+\\.\\s+/);\n                    let currentSection = \"\";\n                    let sectionY = currentYPosition;\n                    // Process each section after the split (skip the first empty element if exists)\n                    for(let i = 0; i < sections.length; i++){\n                        if (sections[i].trim() === \"\") continue;\n                        // Extract section title and content\n                        const sectionParts = sections[i].split(\"\\n\");\n                        const sectionTitle = sectionParts[0].trim();\n                        const sectionContent = sectionParts.slice(1).join(\"\\n\").trim();\n                        // Add section title with bold styling\n                        doc.setFont(\"helvetica\", \"bold\");\n                        doc.text(sectionTitle, 14, sectionY);\n                        doc.setFont(\"helvetica\", \"normal\");\n                        sectionY += 7;\n                        // Add section content with proper formatting\n                        const splitContent = doc.splitTextToSize(sectionContent, pageWidth - 28);\n                        // Check if we need to add a new page\n                        if (sectionY + splitContent.length * 7 > doc.internal.pageSize.getHeight() - 20) {\n                            doc.addPage();\n                            sectionY = 20;\n                            // Add page number\n                            const pageNumber = doc.getNumberOfPages();\n                            doc.setFontSize(10);\n                            doc.text(\"Page \".concat(pageNumber), pageWidth - 20, doc.internal.pageSize.getHeight() - 10);\n                            doc.setFontSize(12);\n                        }\n                        // Handle code examples with special formatting\n                        if (sectionContent.includes(\"```\")) {\n                            const contentParts = sectionContent.split(/```\\w*\\n/);\n                            let contentY = sectionY;\n                            for(let j = 0; j < contentParts.length; j++){\n                                if (j % 2 === 0) {\n                                    // Regular text\n                                    const regularText = contentParts[j].trim();\n                                    if (regularText) {\n                                        const splitRegular = doc.splitTextToSize(regularText, pageWidth - 28);\n                                        doc.text(splitRegular, 14, contentY);\n                                        contentY += splitRegular.length * 7;\n                                    }\n                                } else {\n                                    // Code example\n                                    const codeText = contentParts[j].split(\"```\")[0].trim();\n                                    if (codeText) {\n                                        // Draw a light gray background for code\n                                        doc.setFillColor(240, 240, 240);\n                                        const splitCode = doc.splitTextToSize(codeText, pageWidth - 40);\n                                        doc.rect(14, contentY - 5, pageWidth - 28, splitCode.length * 7 + 10, \"F\");\n                                        // Add the code with monospace font\n                                        doc.setFont(\"courier\", \"normal\");\n                                        doc.text(splitCode, 20, contentY);\n                                        doc.setFont(\"helvetica\", \"normal\");\n                                        contentY += splitCode.length * 7 + 10;\n                                    }\n                                }\n                            }\n                            sectionY = contentY + 10;\n                        } else {\n                            // Regular text without code examples\n                            doc.text(splitContent, 14, sectionY);\n                            sectionY += splitContent.length * 7 + 10;\n                        }\n                    }\n                    currentYPosition = sectionY;\n                } else {\n                    // For simple unstructured remediation text\n                    const splitRemediation = doc.splitTextToSize(remediationText, pageWidth - 28);\n                    doc.text(splitRemediation, 14, currentYPosition);\n                    currentYPosition += splitRemediation.length * 7;\n                }\n            }\n        });\n    }\n    // Add footer with generation date\n    const pageCount = doc.getNumberOfPages();\n    for(let i = 1; i <= pageCount; i++){\n        doc.setPage(i);\n        doc.setFontSize(10);\n        doc.setTextColor(100, 100, 100); // Gray color\n        doc.text(\"Report generated on \".concat(new Date().toLocaleString()), 14, doc.internal.pageSize.getHeight() - 10);\n    }\n    // Return the PDF as a blob\n    return doc.output(\"blob\");\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/pdfGenerator.ts\n"));

/***/ })

});