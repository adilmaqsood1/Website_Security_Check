"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("src_utils_pdfGenerator_ts",{

/***/ "./src/utils/pdfGenerator.ts":
/*!***********************************!*\
  !*** ./src/utils/pdfGenerator.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generatePDFReport: function() { return /* binding */ generatePDFReport; }\n/* harmony export */ });\n/* harmony import */ var jspdf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jspdf */ \"./node_modules/jspdf/dist/jspdf.es.min.js\");\n/* harmony import */ var jspdf_autotable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jspdf-autotable */ \"./node_modules/jspdf-autotable/dist/jspdf.plugin.autotable.mjs\");\n\n\n/**\n * Generate a PDF report from scan data\n * @param scan The scan details\n * @param vulnerabilities List of vulnerabilities found in the scan\n * @returns Blob containing the PDF document\n */ const generatePDFReport = function(scan) {\n    let vulnerabilities = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n    // Initialize PDF document\n    const doc = new jspdf__WEBPACK_IMPORTED_MODULE_0__.jsPDF();\n    const pageWidth = doc.internal.pageSize.getWidth();\n    // Add report title\n    doc.setFontSize(20);\n    doc.setTextColor(0, 51, 102); // Dark blue color\n    doc.text(\"Website Security Scan Report\", pageWidth / 2, 20, {\n        align: \"center\"\n    });\n    // Add scan information\n    doc.setFontSize(12);\n    doc.setTextColor(0, 0, 0); // Black color\n    doc.text(\"URL: \".concat(scan.url || scan.target || \"N/A\"), 14, 35);\n    doc.text(\"Scan Type: \".concat(scan.scan_type ? scan.scan_type.charAt(0).toUpperCase() + scan.scan_type.slice(1) : \"N/A\"), 14, 42);\n    doc.text(\"Status: \".concat(scan.status.charAt(0).toUpperCase() + scan.status.slice(1)), 14, 49);\n    doc.text(\"Date: \".concat(scan.created_at ? new Date(scan.created_at).toLocaleString() : \"N/A\"), 14, 56);\n    // Handle different time field names\n    const startTimeValue = scan.start_time || scan.started_at;\n    const endTimeValue = scan.end_time || scan.completed_at;\n    if (startTimeValue && endTimeValue) {\n        const startTime = new Date(startTimeValue);\n        const endTime = new Date(endTimeValue);\n        doc.text(\"Duration: \".concat(((endTime.getTime() - startTime.getTime()) / 1000 / 60).toFixed(2), \" minutes\"), 14, 63);\n    }\n    // Add summary section\n    doc.setFontSize(16);\n    doc.setTextColor(0, 51, 102); // Dark blue color\n    doc.text(\"Summary\", 14, 75);\n    if (scan.summary) {\n        doc.setFontSize(12);\n        doc.setTextColor(0, 0, 0); // Black color\n        doc.text(\"Total Vulnerabilities: \".concat(scan.summary.total_vulnerabilities), 14, 85);\n        // Add severity counts\n        if (scan.summary.severity_counts) {\n            const severityCounts = scan.summary.severity_counts;\n            // Create a table for severity counts\n            (0,jspdf_autotable__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(doc, {\n                startY: 95,\n                head: [\n                    [\n                        \"Severity\",\n                        \"Count\"\n                    ]\n                ],\n                body: [\n                    [\n                        \"Critical\",\n                        severityCounts.critical.toString()\n                    ],\n                    [\n                        \"High\",\n                        severityCounts.high.toString()\n                    ],\n                    [\n                        \"Medium\",\n                        severityCounts.medium.toString()\n                    ],\n                    [\n                        \"Low\",\n                        severityCounts.low.toString()\n                    ],\n                    [\n                        \"Info\",\n                        severityCounts.info.toString()\n                    ]\n                ],\n                theme: \"striped\",\n                headStyles: {\n                    fillColor: [\n                        0,\n                        51,\n                        102\n                    ]\n                },\n                columnStyles: {\n                    0: {\n                        cellWidth: 40\n                    },\n                    1: {\n                        cellWidth: 40,\n                        halign: \"center\"\n                    }\n                }\n            });\n        }\n    }\n    // Add vulnerabilities section if there are any\n    if (vulnerabilities.length > 0) {\n        // Get the position after the last table or use default value\n        const currentY = doc.previousAutoTable ? doc.previousAutoTable.finalY + 15 : 150;\n        doc.setFontSize(16);\n        doc.setTextColor(0, 51, 102); // Dark blue color\n        doc.text(\"Vulnerabilities\", 14, currentY);\n        // Create a table for vulnerabilities\n        const tableRows = vulnerabilities.map((vuln)=>[\n                vuln.name,\n                vuln.severity.charAt(0).toUpperCase() + vuln.severity.slice(1),\n                vuln.location,\n                vuln.description.length > 50 ? vuln.description.substring(0, 50) + \"...\" : vuln.description\n            ]);\n        (0,jspdf_autotable__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(doc, {\n            startY: currentY + 10,\n            head: [\n                [\n                    \"Name\",\n                    \"Severity\",\n                    \"Location\",\n                    \"Description\"\n                ]\n            ],\n            body: tableRows,\n            theme: \"striped\",\n            headStyles: {\n                fillColor: [\n                    0,\n                    51,\n                    102\n                ]\n            },\n            columnStyles: {\n                0: {\n                    cellWidth: 40\n                },\n                1: {\n                    cellWidth: 30\n                },\n                2: {\n                    cellWidth: 40\n                },\n                3: {\n                    cellWidth: \"auto\"\n                }\n            },\n            didDrawPage: (data)=>{\n                // Add page number at the bottom\n                const pageNumber = doc.getNumberOfPages();\n                doc.setFontSize(10);\n                doc.text(\"Page \".concat(pageNumber), pageWidth - 20, doc.internal.pageSize.getHeight() - 10);\n            }\n        });\n        // Add detailed vulnerability information\n        vulnerabilities.forEach((vuln, index)=>{\n            doc.addPage();\n            // Add page number\n            const pageNumber = doc.getNumberOfPages();\n            doc.setFontSize(10);\n            doc.text(\"Page \".concat(pageNumber), pageWidth - 20, doc.internal.pageSize.getHeight() - 10);\n            // Add vulnerability details\n            doc.setFontSize(16);\n            doc.setTextColor(0, 51, 102); // Dark blue color\n            doc.text(\"Vulnerability #\".concat(index + 1, \": \").concat(vuln.name), 14, 20);\n            doc.setFontSize(12);\n            doc.setTextColor(0, 0, 0); // Black color\n            doc.text(\"Severity: \".concat(vuln.severity.charAt(0).toUpperCase() + vuln.severity.slice(1)), 14, 30);\n            doc.text(\"Location: \".concat(vuln.location), 14, 37);\n            if (vuln.cwe_id) {\n                doc.text(\"CWE ID: \".concat(vuln.cwe_id), 14, 44);\n            }\n            if (vuln.cvss_score) {\n                doc.text(\"CVSS Score: \".concat(vuln.cvss_score), 14, 51);\n            }\n            // Description with word wrap\n            doc.setFontSize(12);\n            doc.text(\"Description:\", 14, 58);\n            const splitDescription = doc.splitTextToSize(vuln.description, pageWidth - 28);\n            doc.text(splitDescription, 14, 65);\n            let currentYPosition = 65 + splitDescription.length * 7;\n            // Evidence with word wrap if available\n            if (vuln.evidence) {\n                doc.text(\"Evidence:\", 14, currentYPosition);\n                const splitEvidence = doc.splitTextToSize(vuln.evidence, pageWidth - 28);\n                doc.text(splitEvidence, 14, currentYPosition + 7);\n                currentYPosition += 7 + splitEvidence.length * 7;\n            }\n            // Enhanced remediation section with structured format\n            if (vuln.remediation) {\n                // Check if we need to add a new page for remediation section\n                const pageHeight = doc.internal.pageSize.getHeight();\n                if (currentYPosition > pageHeight - 60) {\n                    doc.addPage();\n                    // Add page number\n                    const pageNumber = doc.getNumberOfPages();\n                    doc.setFontSize(10);\n                    doc.text(\"Page \".concat(pageNumber), pageWidth - 20, pageHeight - 10);\n                    currentYPosition = 20; // Reset position to top of new page\n                }\n                // Main remediation heading\n                doc.setFontSize(14);\n                doc.setTextColor(0, 51, 102); // Dark blue color\n                doc.text(\"Remediation:\", 14, currentYPosition);\n                currentYPosition += 10;\n                // Reset to normal text style\n                doc.setFontSize(12);\n                doc.setTextColor(0, 0, 0); // Black color\n                // Parse the remediation text to identify sections and clean markdown formatting\n                let remediationText = vuln.remediation;\n                // Remove all markdown header formatting (# through ####)\n                remediationText = remediationText.replace(/^#{1,4}\\s+/gm, \"\");\n                // Clean up other markdown formatting\n                remediationText = remediationText// Bold text (** or __)\n                .replace(/\\*\\*([^*]+)\\*\\*/g, \"$1\").replace(/__([^_]+)__/g, \"$1\")// Italic text (* or _)\n                .replace(/\\*([^*]+)\\*/g, \"$1\").replace(/_([^_]+)_/g, \"$1\")// Strikethrough text (~~)\n                .replace(/~~([^~]+)~~/g, \"$1\")// Inline code (`)\n                .replace(/`([^`]+)`/g, \"$1\")// Bullet points\n                .replace(/^\\s*[\\*\\-\\+]\\s+/gm, \"• \")// Numbered lists (keep numbers but standardize format)\n                .replace(/^\\s*\\d+\\.\\s+/gm, (match)=>match);\n                // Check if the remediation text contains structured sections\n                if (remediationText.includes(\"1. Importance of Fixing\") || remediationText.includes(\"Importance of Fixing\")) {\n                    // For structured remediation format - remove markdown headers and clean up formatting\n                    // Split by section numbers (1., 2., etc.)\n                    const sections = remediationText.split(/\\d+\\.\\s+/);\n                    // If the split didn't work well (only one section), try another approach\n                    if (sections.length <= 1) {\n                        // Try splitting by newline followed by a number and period\n                        const altSections = remediationText.split(/\\n\\d+\\.\\s+/);\n                        if (altSections.length > 1) {\n                            // Use this split instead\n                            sections.length = 0; // Clear the array\n                            altSections.forEach((section)=>sections.push(section));\n                        }\n                    }\n                    let sectionY = currentYPosition;\n                    const marginBottom = 20; // Space to reserve at bottom of page\n                    // Process each section after the split (skip the first empty element if exists)\n                    for(let i = 0; i < sections.length; i++){\n                        if (sections[i].trim() === \"\") continue;\n                        // Extract section title and content\n                        const sectionParts = sections[i].split(\"\\n\");\n                        // Clean up any remaining markdown formatting from section title\n                        const sectionTitle = sectionParts[0].trim().replace(/^#+\\s*/g, \"\");\n                        const sectionContent = sectionParts.slice(1).join(\"\\n\").trim();\n                        // Check if we need to add a new page before starting a new section\n                        if (sectionY > pageHeight - 40) {\n                            doc.addPage();\n                            // Add page number\n                            const pageNumber = doc.getNumberOfPages();\n                            doc.setFontSize(10);\n                            doc.text(\"Page \".concat(pageNumber), pageWidth - 20, pageHeight - 10);\n                            sectionY = 20; // Reset position to top of new page\n                        }\n                        // Add section title with bold styling\n                        doc.setFont(\"helvetica\", \"bold\");\n                        doc.text(sectionTitle, 14, sectionY);\n                        doc.setFont(\"helvetica\", \"normal\");\n                        sectionY += 7;\n                        // Add section content with proper formatting\n                        const splitContent = doc.splitTextToSize(sectionContent, pageWidth - 28);\n                        // Check if content will fit on current page\n                        const contentHeight = splitContent.length * 7;\n                        if (sectionY + contentHeight > pageHeight - marginBottom) {\n                            // Content won't fit on current page\n                            // Calculate how many lines will fit on current page\n                            const availableHeight = pageHeight - marginBottom - sectionY;\n                            const linesPerPage = Math.floor(availableHeight / 7);\n                            if (linesPerPage > 0) {\n                                // Add as many lines as will fit on current page\n                                const firstPageLines = splitContent.slice(0, linesPerPage);\n                                doc.text(firstPageLines, 14, sectionY);\n                            }\n                            // Add a new page for remaining content\n                            doc.addPage();\n                            // Add page number\n                            const pageNumber = doc.getNumberOfPages();\n                            doc.setFontSize(10);\n                            doc.text(\"Page \".concat(pageNumber), pageWidth - 20, pageHeight - 10);\n                            doc.setFontSize(12);\n                            // Continue with remaining content on new page\n                            const remainingLines = splitContent.slice(linesPerPage > 0 ? linesPerPage : 0);\n                            if (remainingLines.length > 0) {\n                                sectionY = 20; // Reset position to top of new page\n                                doc.text(remainingLines, 14, sectionY);\n                                sectionY += remainingLines.length * 7 + 10;\n                            } else {\n                                sectionY = 20; // Reset position to top of new page\n                            }\n                        } else {\n                            // Content fits on current page\n                            doc.text(splitContent, 14, sectionY);\n                            sectionY += contentHeight + 10;\n                        }\n                        // Handle code examples with special formatting\n                        if (sectionContent.includes(\"```\")) {\n                            const contentParts = sectionContent.split(/```\\w*\\n/);\n                            let contentY = sectionY;\n                            for(let j = 0; j < contentParts.length; j++){\n                                if (j % 2 === 0) {\n                                    // Regular text\n                                    const regularText = contentParts[j].trim();\n                                    if (regularText) {\n                                        const splitRegular = doc.splitTextToSize(regularText, pageWidth - 28);\n                                        // Check if content will fit on current page\n                                        if (contentY + splitRegular.length * 7 > pageHeight - marginBottom) {\n                                            // Add a new page\n                                            doc.addPage();\n                                            // Add page number\n                                            const pageNumber = doc.getNumberOfPages();\n                                            doc.setFontSize(10);\n                                            doc.text(\"Page \".concat(pageNumber), pageWidth - 20, pageHeight - 10);\n                                            doc.setFontSize(12);\n                                            contentY = 20; // Reset position to top of new page\n                                        }\n                                        doc.text(splitRegular, 14, contentY);\n                                        contentY += splitRegular.length * 7;\n                                    }\n                                } else {\n                                    // Code example\n                                    const codeText = contentParts[j].split(\"```\")[0].trim();\n                                    if (codeText) {\n                                        const splitCode = doc.splitTextToSize(codeText, pageWidth - 40);\n                                        const codeHeight = splitCode.length * 7 + 10;\n                                        // Check if code block will fit on current page\n                                        if (contentY + codeHeight > pageHeight - marginBottom) {\n                                            // Add a new page\n                                            doc.addPage();\n                                            // Add page number\n                                            const pageNumber = doc.getNumberOfPages();\n                                            doc.setFontSize(10);\n                                            doc.text(\"Page \".concat(pageNumber), pageWidth - 20, pageHeight - 10);\n                                            doc.setFontSize(12);\n                                            contentY = 20; // Reset position to top of new page\n                                        }\n                                        // Draw a light gray background for code\n                                        doc.setFillColor(240, 240, 240);\n                                        doc.rect(14, contentY - 5, pageWidth - 28, codeHeight, \"F\");\n                                        // Add the code with monospace font\n                                        doc.setFont(\"courier\", \"normal\");\n                                        doc.text(splitCode, 20, contentY);\n                                        doc.setFont(\"helvetica\", \"normal\");\n                                        contentY += codeHeight;\n                                    }\n                                }\n                            }\n                            sectionY = contentY + 10;\n                        }\n                    }\n                    currentYPosition = sectionY;\n                } else {\n                    // For simple unstructured remediation text\n                    // Clean up any markdown formatting from unstructured text\n                    remediationText = remediationText.replace(/^###\\s+/gm, \"\");\n                    remediationText = remediationText.replace(/^####\\s+/gm, \"\");\n                    remediationText = remediationText.replace(/^#\\s+/gm, \"\");\n                    // Clean up other markdown formatting for unstructured text\n                    remediationText = remediationText// Bold text (** or __)\n                    .replace(/\\*\\*([^*]+)\\*\\*/g, \"$1\").replace(/__([^_]+)__/g, \"$1\")// Italic text (* or _)\n                    .replace(/\\*([^*]+)\\*/g, \"$1\").replace(/_([^_]+)_/g, \"$1\")// Strikethrough text (~~)\n                    .replace(/~~([^~]+)~~/g, \"$1\")// Inline code (`)\n                    .replace(/`([^`]+)`/g, \"$1\")// Bullet points\n                    .replace(/^\\s*[\\*\\-\\+]\\s+/gm, \"• \")// Numbered lists (keep numbers but standardize format)\n                    .replace(/^\\s*\\d+\\.\\s+/gm, (match)=>match);\n                    const splitRemediation = doc.splitTextToSize(remediationText, pageWidth - 28);\n                    const remediationHeight = splitRemediation.length * 7;\n                    // Check if remediation text will fit on current page\n                    if (currentYPosition + remediationHeight > pageHeight - 20) {\n                        // Calculate how many lines will fit on current page\n                        const availableHeight = pageHeight - 20 - currentYPosition;\n                        const linesPerPage = Math.floor(availableHeight / 7);\n                        if (linesPerPage > 0) {\n                            // Add as many lines as will fit on current page\n                            const firstPageLines = splitRemediation.slice(0, linesPerPage);\n                            doc.text(firstPageLines, 14, currentYPosition);\n                        }\n                        // Add a new page for remaining content\n                        doc.addPage();\n                        // Add page number\n                        const pageNumber = doc.getNumberOfPages();\n                        doc.setFontSize(10);\n                        doc.text(\"Page \".concat(pageNumber), pageWidth - 20, pageHeight - 10);\n                        doc.setFontSize(12);\n                        // Continue with remaining content on new page\n                        const remainingLines = splitRemediation.slice(linesPerPage > 0 ? linesPerPage : 0);\n                        if (remainingLines.length > 0) {\n                            currentYPosition = 20; // Reset position to top of new page\n                            doc.text(remainingLines, 14, currentYPosition);\n                            currentYPosition += remainingLines.length * 7;\n                        } else {\n                            currentYPosition = 20; // Reset position to top of new page\n                        }\n                    } else {\n                        // Content fits on current page\n                        doc.text(splitRemediation, 14, currentYPosition);\n                        currentYPosition += remediationHeight;\n                    }\n                }\n            }\n        });\n    }\n    // Add footer with generation date\n    const pageCount = doc.getNumberOfPages();\n    for(let i = 1; i <= pageCount; i++){\n        doc.setPage(i);\n        doc.setFontSize(10);\n        doc.setTextColor(100, 100, 100); // Gray color\n        doc.text(\"Report generated on \".concat(new Date().toLocaleString()), 14, doc.internal.pageSize.getHeight() - 10);\n    }\n    // Return the PDF as a blob\n    return doc.output(\"blob\");\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SUFBSU8sSUFBSSxDQUFDLFFBQW1CLE9BQVh1RCxhQUFjN0QsWUFBWSxJQUFJMkUsYUFBYTt3QkFDNUQ1RSxJQUFJSyxXQUFXLENBQUM7d0JBRWhCLDhDQUE4Qzt3QkFDOUMsTUFBTWlHLGlCQUFpQlcsaUJBQWlCbkcsS0FBSyxDQUFDb0YsZUFBZSxJQUFJQSxlQUFlO3dCQUNoRixJQUFJSSxlQUFldEQsTUFBTSxHQUFHLEdBQUc7NEJBQzdCd0IsbUJBQW1CLElBQUksb0NBQW9DOzRCQUMzRHhFLElBQUlPLElBQUksQ0FBQytGLGdCQUFnQixJQUFJOUI7NEJBQzdCQSxvQkFBb0I4QixlQUFldEQsTUFBTSxHQUFHO3dCQUM5QyxPQUFPOzRCQUNMd0IsbUJBQW1CLElBQUksb0NBQW9DO3dCQUM3RDtvQkFDRixPQUFPO3dCQUNMLCtCQUErQjt3QkFDL0J4RSxJQUFJTyxJQUFJLENBQUMwRyxrQkFBa0IsSUFBSXpDO3dCQUMvQkEsb0JBQW9CMEM7b0JBQ3RCO2dCQUNGO1lBQ0Y7UUFDRjtJQUNGO0lBRUEsa0NBQWtDO0lBQ2xDLE1BQU1DLFlBQVluSCxJQUFJK0QsZ0JBQWdCO0lBQ3RDLElBQUssSUFBSXlCLElBQUksR0FBR0EsS0FBSzJCLFdBQVczQixJQUFLO1FBQ25DeEYsSUFBSW9ILE9BQU8sQ0FBQzVCO1FBQ1p4RixJQUFJSyxXQUFXLENBQUM7UUFDaEJMLElBQUlNLFlBQVksQ0FBQyxLQUFLLEtBQUssTUFBTSxhQUFhO1FBQzlDTixJQUFJTyxJQUFJLENBQUMsdUJBQW1ELE9BQTVCLElBQUlVLE9BQU9DLGNBQWMsS0FBTSxJQUFJbEIsSUFBSUUsUUFBUSxDQUFDQyxRQUFRLENBQUM2RCxTQUFTLEtBQUs7SUFDekc7SUFFQSwyQkFBMkI7SUFDM0IsT0FBT2hFLElBQUlxSCxNQUFNLENBQUM7QUFDcEIsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvdXRpbHMvcGRmR2VuZXJhdG9yLnRzP2RjMWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsganNQREYgfSBmcm9tICdqc3BkZic7XG5pbXBvcnQgYXV0b1RhYmxlIGZyb20gJ2pzcGRmLWF1dG90YWJsZSc7XG5cbmludGVyZmFjZSBTZXZlcml0eUNvdW50cyB7XG4gIGNyaXRpY2FsOiBudW1iZXI7XG4gIGhpZ2g6IG51bWJlcjtcbiAgbWVkaXVtOiBudW1iZXI7XG4gIGxvdzogbnVtYmVyO1xuICBpbmZvOiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBTY2FuU3VtbWFyeSB7XG4gIHRvdGFsX3Z1bG5lcmFiaWxpdGllczogbnVtYmVyO1xuICBzZXZlcml0eV9jb3VudHM6IFNldmVyaXR5Q291bnRzO1xuICBzY2FuX2R1cmF0aW9uPzogbnVtYmVyO1xuICBwYWdlc19zY2FubmVkPzogbnVtYmVyO1xufVxuXG5pbnRlcmZhY2UgVnVsbmVyYWJpbGl0eSB7XG4gIGlkOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgc2V2ZXJpdHk6IHN0cmluZztcbiAgbG9jYXRpb246IHN0cmluZztcbiAgZXZpZGVuY2U/OiBzdHJpbmc7XG4gIHJlbWVkaWF0aW9uPzogc3RyaW5nO1xuICBjd2VfaWQ/OiBzdHJpbmc7XG4gIGN2c3Nfc2NvcmU/OiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBTY2FuRGV0YWlscyB7XG4gIGlkOiBzdHJpbmc7XG4gIHVybD86IHN0cmluZztcbiAgdGFyZ2V0Pzogc3RyaW5nOyAvLyBBZGRlZCB0YXJnZXQgZmllbGQgYXMgYW4gYWx0ZXJuYXRpdmUgdG8gdXJsXG4gIHNjYW5fdHlwZT86IHN0cmluZztcbiAgc3RhdHVzOiBzdHJpbmc7XG4gIGNyZWF0ZWRfYXQ/OiBzdHJpbmc7XG4gIHN0YXJ0ZWRfYXQ/OiBzdHJpbmc7IC8vIEFkZGVkIHN0YXJ0ZWRfYXQgZmllbGQgYXMgYW4gYWx0ZXJuYXRpdmUgdG8gc3RhcnRfdGltZVxuICBjb21wbGV0ZWRfYXQ/OiBzdHJpbmc7IC8vIEFkZGVkIGNvbXBsZXRlZF9hdCBmaWVsZCBhcyBhbiBhbHRlcm5hdGl2ZSB0byBlbmRfdGltZVxuICBzdGFydF90aW1lPzogc3RyaW5nIHwgbnVsbDtcbiAgZW5kX3RpbWU/OiBzdHJpbmcgfCBudWxsO1xuICBzdW1tYXJ5OiBTY2FuU3VtbWFyeSB8IG51bGw7XG59XG5cbi8qKlxuICogR2VuZXJhdGUgYSBQREYgcmVwb3J0IGZyb20gc2NhbiBkYXRhXG4gKiBAcGFyYW0gc2NhbiBUaGUgc2NhbiBkZXRhaWxzXG4gKiBAcGFyYW0gdnVsbmVyYWJpbGl0aWVzIExpc3Qgb2YgdnVsbmVyYWJpbGl0aWVzIGZvdW5kIGluIHRoZSBzY2FuXG4gKiBAcmV0dXJucyBCbG9iIGNvbnRhaW5pbmcgdGhlIFBERiBkb2N1bWVudFxuICovXG5leHBvcnQgY29uc3QgZ2VuZXJhdGVQREZSZXBvcnQgPSAoc2NhbjogU2NhbkRldGFpbHMsIHZ1bG5lcmFiaWxpdGllczogVnVsbmVyYWJpbGl0eVtdID0gW10pOiBCbG9iID0+IHtcbiAgLy8gSW5pdGlhbGl6ZSBQREYgZG9jdW1lbnRcbiAgY29uc3QgZG9jID0gbmV3IGpzUERGKCk7XG4gIGNvbnN0IHBhZ2VXaWR0aCA9IGRvYy5pbnRlcm5hbC5wYWdlU2l6ZS5nZXRXaWR0aCgpO1xuICBcbiAgLy8gQWRkIHJlcG9ydCB0aXRsZVxuICBkb2Muc2V0Rm9udFNpemUoMjApO1xuICBkb2Muc2V0VGV4dENvbG9yKDAsIDUxLCAxMDIpOyAvLyBEYXJrIGJsdWUgY29sb3JcbiAgZG9jLnRleHQoJ1dlYnNpdGUgU2VjdXJpdHkgU2NhbiBSZXBvcnQnLCBwYWdlV2lkdGggLyAyLCAyMCwgeyBhbGlnbjogJ2NlbnRlcicgfSk7XG4gIFxuICAvLyBBZGQgc2NhbiBpbmZvcm1hdGlvblxuICBkb2Muc2V0Rm9udFNpemUoMTIpO1xuICBkb2Muc2V0VGV4dENvbG9yKDAsIDAsIDApOyAvLyBCbGFjayBjb2xvclxuICBkb2MudGV4dChgVVJMOiAke3NjYW4udXJsIHx8IHNjYW4udGFyZ2V0IHx8ICdOL0EnfWAsIDE0LCAzNSk7XG4gIGRvYy50ZXh0KGBTY2FuIFR5cGU6ICR7c2Nhbi5zY2FuX3R5cGUgPyBzY2FuLnNjYW5fdHlwZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHNjYW4uc2Nhbl90eXBlLnNsaWNlKDEpIDogJ04vQSd9YCwgMTQsIDQyKTtcbiAgZG9jLnRleHQoYFN0YXR1czogJHtzY2FuLnN0YXR1cy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHNjYW4uc3RhdHVzLnNsaWNlKDEpfWAsIDE0LCA0OSk7XG4gIGRvYy50ZXh0KGBEYXRlOiAke3NjYW4uY3JlYXRlZF9hdCA/IG5ldyBEYXRlKHNjYW4uY3JlYXRlZF9hdCkudG9Mb2NhbGVTdHJpbmcoKSA6ICdOL0EnfWAsIDE0LCA1Nik7XG4gIFxuICAvLyBIYW5kbGUgZGlmZmVyZW50IHRpbWUgZmllbGQgbmFtZXNcbiAgY29uc3Qgc3RhcnRUaW1lVmFsdWUgPSBzY2FuLnN0YXJ0X3RpbWUgfHwgc2Nhbi5zdGFydGVkX2F0O1xuICBjb25zdCBlbmRUaW1lVmFsdWUgPSBzY2FuLmVuZF90aW1lIHx8IHNjYW4uY29tcGxldGVkX2F0O1xuICBcbiAgaWYgKHN0YXJ0VGltZVZhbHVlICYmIGVuZFRpbWVWYWx1ZSkge1xuICAgIGNvbnN0IHN0YXJ0VGltZSA9IG5ldyBEYXRlKHN0YXJ0VGltZVZhbHVlKTtcbiAgICBjb25zdCBlbmRUaW1lID0gbmV3IERhdGUoZW5kVGltZVZhbHVlKTtcbiAgICBkb2MudGV4dChgRHVyYXRpb246ICR7KChlbmRUaW1lLmdldFRpbWUoKSAtIHN0YXJ0VGltZS5nZXRUaW1lKCkpIC8gMTAwMCAvIDYwKS50b0ZpeGVkKDIpfSBtaW51dGVzYCwgMTQsIDYzKTtcbiAgfVxuICBcbiAgLy8gQWRkIHN1bW1hcnkgc2VjdGlvblxuICBkb2Muc2V0Rm9udFNpemUoMTYpO1xuICBkb2Muc2V0VGV4dENvbG9yKDAsIDUxLCAxMDIpOyAvLyBEYXJrIGJsdWUgY29sb3JcbiAgZG9jLnRleHQoJ1N1bW1hcnknLCAxNCwgNzUpO1xuICBcbiAgaWYgKHNjYW4uc3VtbWFyeSkge1xuICAgIGRvYy5zZXRGb250U2l6ZSgxMik7XG4gICAgZG9jLnNldFRleHRDb2xvcigwLCAwLCAwKTsgLy8gQmxhY2sgY29sb3JcbiAgICBkb2MudGV4dChgVG90YWwgVnVsbmVyYWJpbGl0aWVzOiAke3NjYW4uc3VtbWFyeS50b3RhbF92dWxuZXJhYmlsaXRpZXN9YCwgMTQsIDg1KTtcbiAgICBcbiAgICAvLyBBZGQgc2V2ZXJpdHkgY291bnRzXG4gICAgaWYgKHNjYW4uc3VtbWFyeS5zZXZlcml0eV9jb3VudHMpIHtcbiAgICAgIGNvbnN0IHNldmVyaXR5Q291bnRzID0gc2Nhbi5zdW1tYXJ5LnNldmVyaXR5X2NvdW50cztcbiAgICAgIFxuICAgICAgLy8gQ3JlYXRlIGEgdGFibGUgZm9yIHNldmVyaXR5IGNvdW50c1xuICAgICAgYXV0b1RhYmxlKGRvYywge1xuICAgICAgICBzdGFydFk6IDk1LFxuICAgICAgICBoZWFkOiBbWydTZXZlcml0eScsICdDb3VudCddXSxcbiAgICAgICAgYm9keTogW1xuICAgICAgICAgIFsnQ3JpdGljYWwnLCBzZXZlcml0eUNvdW50cy5jcml0aWNhbC50b1N0cmluZygpXSxcbiAgICAgICAgICBbJ0hpZ2gnLCBzZXZlcml0eUNvdW50cy5oaWdoLnRvU3RyaW5nKCldLFxuICAgICAgICAgIFsnTWVkaXVtJywgc2V2ZXJpdHlDb3VudHMubWVkaXVtLnRvU3RyaW5nKCldLFxuICAgICAgICAgIFsnTG93Jywgc2V2ZXJpdHlDb3VudHMubG93LnRvU3RyaW5nKCldLFxuICAgICAgICAgIFsnSW5mbycsIHNldmVyaXR5Q291bnRzLmluZm8udG9TdHJpbmcoKV1cbiAgICAgICAgXSxcbiAgICAgICAgdGhlbWU6ICdzdHJpcGVkJyxcbiAgICAgICAgaGVhZFN0eWxlczogeyBmaWxsQ29sb3I6IFswLCA1MSwgMTAyXSB9LFxuICAgICAgICBjb2x1bW5TdHlsZXM6IHtcbiAgICAgICAgICAwOiB7IGNlbGxXaWR0aDogNDAgfSxcbiAgICAgICAgICAxOiB7IGNlbGxXaWR0aDogNDAsIGhhbGlnbjogJ2NlbnRlcicgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgXG4gIC8vIEFkZCB2dWxuZXJhYmlsaXRpZXMgc2VjdGlvbiBpZiB0aGVyZSBhcmUgYW55XG4gIGlmICh2dWxuZXJhYmlsaXRpZXMubGVuZ3RoID4gMCkge1xuICAgIC8vIEdldCB0aGUgcG9zaXRpb24gYWZ0ZXIgdGhlIGxhc3QgdGFibGUgb3IgdXNlIGRlZmF1bHQgdmFsdWVcbiAgICBjb25zdCBjdXJyZW50WSA9IChkb2MgYXMgYW55KS5wcmV2aW91c0F1dG9UYWJsZSA/KGRvYyBhcyBhbnkpLnByZXZpb3VzQXV0b1RhYmxlLmZpbmFsWSArIDE1IDogMTUwO1xuICAgIFxuICAgIGRvYy5zZXRGb250U2l6ZSgxNik7XG4gICAgZG9jLnNldFRleHRDb2xvcigwLCA1MSwgMTAyKTsgLy8gRGFyayBibHVlIGNvbG9yXG4gICAgZG9jLnRleHQoJ1Z1bG5lcmFiaWxpdGllcycsIDE0LCBjdXJyZW50WSk7XG4gICAgXG4gICAgLy8gQ3JlYXRlIGEgdGFibGUgZm9yIHZ1bG5lcmFiaWxpdGllc1xuICAgIGNvbnN0IHRhYmxlUm93cyA9IHZ1bG5lcmFiaWxpdGllcy5tYXAodnVsbiA9PiBbXG4gICAgICB2dWxuLm5hbWUsXG4gICAgICB2dWxuLnNldmVyaXR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdnVsbi5zZXZlcml0eS5zbGljZSgxKSxcbiAgICAgIHZ1bG4ubG9jYXRpb24sXG4gICAgICB2dWxuLmRlc2NyaXB0aW9uLmxlbmd0aCA+IDUwID8gdnVsbi5kZXNjcmlwdGlvbi5zdWJzdHJpbmcoMCwgNTApICsgJy4uLicgOiB2dWxuLmRlc2NyaXB0aW9uXG4gICAgXSk7XG4gICAgXG4gICAgYXV0b1RhYmxlKGRvYywge1xuICAgICAgc3RhcnRZOiBjdXJyZW50WSArIDEwLFxuICAgICAgaGVhZDogW1snTmFtZScsICdTZXZlcml0eScsICdMb2NhdGlvbicsICdEZXNjcmlwdGlvbiddXSxcbiAgICAgIGJvZHk6IHRhYmxlUm93cyxcbiAgICAgIHRoZW1lOiAnc3RyaXBlZCcsXG4gICAgICBoZWFkU3R5bGVzOiB7IGZpbGxDb2xvcjogWzAsIDUxLCAxMDJdIH0sXG4gICAgICBjb2x1bW5TdHlsZXM6IHtcbiAgICAgICAgMDogeyBjZWxsV2lkdGg6IDQwIH0sXG4gICAgICAgIDE6IHsgY2VsbFdpZHRoOiAzMCB9LFxuICAgICAgICAyOiB7IGNlbGxXaWR0aDogNDAgfSxcbiAgICAgICAgMzogeyBjZWxsV2lkdGg6ICdhdXRvJyB9XG4gICAgICB9LFxuICAgICAgZGlkRHJhd1BhZ2U6IChkYXRhKSA9PiB7XG4gICAgICAgIC8vIEFkZCBwYWdlIG51bWJlciBhdCB0aGUgYm90dG9tXG4gICAgICAgIGNvbnN0IHBhZ2VOdW1iZXIgPSBkb2MuZ2V0TnVtYmVyT2ZQYWdlcygpO1xuICAgICAgICBkb2Muc2V0Rm9udFNpemUoMTApO1xuICAgICAgICBkb2MudGV4dChgUGFnZSAke3BhZ2VOdW1iZXJ9YCwgcGFnZVdpZHRoIC0gMjAsIGRvYy5pbnRlcm5hbC5wYWdlU2l6ZS5nZXRIZWlnaHQoKSAtIDEwKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICAvLyBBZGQgZGV0YWlsZWQgdnVsbmVyYWJpbGl0eSBpbmZvcm1hdGlvblxuICAgIHZ1bG5lcmFiaWxpdGllcy5mb3JFYWNoKCh2dWxuLCBpbmRleCkgPT4ge1xuICAgICAgZG9jLmFkZFBhZ2UoKTtcbiAgICAgIFxuICAgICAgLy8gQWRkIHBhZ2UgbnVtYmVyXG4gICAgICBjb25zdCBwYWdlTnVtYmVyID0gZG9jLmdldE51bWJlck9mUGFnZXMoKTtcbiAgICAgIGRvYy5zZXRGb250U2l6ZSgxMCk7XG4gICAgICBkb2MudGV4dChgUGFnZSAke3BhZ2VOdW1iZXJ9YCwgcGFnZVdpZHRoIC0gMjAsIGRvYy5pbnRlcm5hbC5wYWdlU2l6ZS5nZXRIZWlnaHQoKSAtIDEwKTtcbiAgICAgIFxuICAgICAgLy8gQWRkIHZ1bG5lcmFiaWxpdHkgZGV0YWlsc1xuICAgICAgZG9jLnNldEZvbnRTaXplKDE2KTtcbiAgICAgIGRvYy5zZXRUZXh0Q29sb3IoMCwgNTEsIDEwMik7IC8vIERhcmsgYmx1ZSBjb2xvclxuICAgICAgZG9jLnRleHQoYFZ1bG5lcmFiaWxpdHkgIyR7aW5kZXggKyAxfTogJHt2dWxuLm5hbWV9YCwgMTQsIDIwKTtcbiAgICAgIFxuICAgICAgZG9jLnNldEZvbnRTaXplKDEyKTtcbiAgICAgIGRvYy5zZXRUZXh0Q29sb3IoMCwgMCwgMCk7IC8vIEJsYWNrIGNvbG9yXG4gICAgICBkb2MudGV4dChgU2V2ZXJpdHk6ICR7dnVsbi5zZXZlcml0eS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHZ1bG4uc2V2ZXJpdHkuc2xpY2UoMSl9YCwgMTQsIDMwKTtcbiAgICAgIGRvYy50ZXh0KGBMb2NhdGlvbjogJHt2dWxuLmxvY2F0aW9ufWAsIDE0LCAzNyk7XG4gICAgICBcbiAgICAgIGlmICh2dWxuLmN3ZV9pZCkge1xuICAgICAgICBkb2MudGV4dChgQ1dFIElEOiAke3Z1bG4uY3dlX2lkfWAsIDE0LCA0NCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmICh2dWxuLmN2c3Nfc2NvcmUpIHtcbiAgICAgICAgZG9jLnRleHQoYENWU1MgU2NvcmU6ICR7dnVsbi5jdnNzX3Njb3JlfWAsIDE0LCA1MSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIERlc2NyaXB0aW9uIHdpdGggd29yZCB3cmFwXG4gICAgICBkb2Muc2V0Rm9udFNpemUoMTIpO1xuICAgICAgZG9jLnRleHQoJ0Rlc2NyaXB0aW9uOicsIDE0LCA1OCk7XG4gICAgICBjb25zdCBzcGxpdERlc2NyaXB0aW9uID0gZG9jLnNwbGl0VGV4dFRvU2l6ZSh2dWxuLmRlc2NyaXB0aW9uLCBwYWdlV2lkdGggLSAyOCk7XG4gICAgICBkb2MudGV4dChzcGxpdERlc2NyaXB0aW9uLCAxNCwgNjUpO1xuICAgICAgXG4gICAgICBsZXQgY3VycmVudFlQb3NpdGlvbiA9IDY1ICsgKHNwbGl0RGVzY3JpcHRpb24ubGVuZ3RoICogNyk7XG4gICAgICBcbiAgICAgIC8vIEV2aWRlbmNlIHdpdGggd29yZCB3cmFwIGlmIGF2YWlsYWJsZVxuICAgICAgaWYgKHZ1bG4uZXZpZGVuY2UpIHtcbiAgICAgICAgZG9jLnRleHQoJ0V2aWRlbmNlOicsIDE0LCBjdXJyZW50WVBvc2l0aW9uKTtcbiAgICAgICAgY29uc3Qgc3BsaXRFdmlkZW5jZSA9IGRvYy5zcGxpdFRleHRUb1NpemUodnVsbi5ldmlkZW5jZSwgcGFnZVdpZHRoIC0gMjgpO1xuICAgICAgICBkb2MudGV4dChzcGxpdEV2aWRlbmNlLCAxNCwgY3VycmVudFlQb3NpdGlvbiArIDcpO1xuICAgICAgICBjdXJyZW50WVBvc2l0aW9uICs9IDcgKyAoc3BsaXRFdmlkZW5jZS5sZW5ndGggKiA3KTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gRW5oYW5jZWQgcmVtZWRpYXRpb24gc2VjdGlvbiB3aXRoIHN0cnVjdHVyZWQgZm9ybWF0XG4gICAgICBpZiAodnVsbi5yZW1lZGlhdGlvbikge1xuICAgICAgICAvLyBDaGVjayBpZiB3ZSBuZWVkIHRvIGFkZCBhIG5ldyBwYWdlIGZvciByZW1lZGlhdGlvbiBzZWN0aW9uXG4gICAgICAgIGNvbnN0IHBhZ2VIZWlnaHQgPSBkb2MuaW50ZXJuYWwucGFnZVNpemUuZ2V0SGVpZ2h0KCk7XG4gICAgICAgIGlmIChjdXJyZW50WVBvc2l0aW9uID4gcGFnZUhlaWdodCAtIDYwKSB7IC8vIExlYXZlIGVub3VnaCBzcGFjZSBmb3IgaGVhZGluZyBhbmQgaW5pdGlhbCBjb250ZW50XG4gICAgICAgICAgZG9jLmFkZFBhZ2UoKTtcbiAgICAgICAgICAvLyBBZGQgcGFnZSBudW1iZXJcbiAgICAgICAgICBjb25zdCBwYWdlTnVtYmVyID0gZG9jLmdldE51bWJlck9mUGFnZXMoKTtcbiAgICAgICAgICBkb2Muc2V0Rm9udFNpemUoMTApO1xuICAgICAgICAgIGRvYy50ZXh0KGBQYWdlICR7cGFnZU51bWJlcn1gLCBwYWdlV2lkdGggLSAyMCwgcGFnZUhlaWdodCAtIDEwKTtcbiAgICAgICAgICBjdXJyZW50WVBvc2l0aW9uID0gMjA7IC8vIFJlc2V0IHBvc2l0aW9uIHRvIHRvcCBvZiBuZXcgcGFnZVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBNYWluIHJlbWVkaWF0aW9uIGhlYWRpbmdcbiAgICAgICAgZG9jLnNldEZvbnRTaXplKDE0KTtcbiAgICAgICAgZG9jLnNldFRleHRDb2xvcigwLCA1MSwgMTAyKTsgLy8gRGFyayBibHVlIGNvbG9yXG4gICAgICAgIGRvYy50ZXh0KCdSZW1lZGlhdGlvbjonLCAxNCwgY3VycmVudFlQb3NpdGlvbik7XG4gICAgICAgIGN1cnJlbnRZUG9zaXRpb24gKz0gMTA7XG4gICAgICAgIFxuICAgICAgICAvLyBSZXNldCB0byBub3JtYWwgdGV4dCBzdHlsZVxuICAgICAgICBkb2Muc2V0Rm9udFNpemUoMTIpO1xuICAgICAgICBkb2Muc2V0VGV4dENvbG9yKDAsIDAsIDApOyAvLyBCbGFjayBjb2xvclxuICAgICAgICBcbiAgICAgICAgLy8gUGFyc2UgdGhlIHJlbWVkaWF0aW9uIHRleHQgdG8gaWRlbnRpZnkgc2VjdGlvbnMgYW5kIGNsZWFuIG1hcmtkb3duIGZvcm1hdHRpbmdcbiAgICAgICAgbGV0IHJlbWVkaWF0aW9uVGV4dCA9IHZ1bG4ucmVtZWRpYXRpb247XG4gICAgICAgIFxuICAgICAgICAvLyBSZW1vdmUgYWxsIG1hcmtkb3duIGhlYWRlciBmb3JtYXR0aW5nICgjIHRocm91Z2ggIyMjIylcbiAgICAgICAgcmVtZWRpYXRpb25UZXh0ID0gcmVtZWRpYXRpb25UZXh0LnJlcGxhY2UoL14jezEsNH1cXHMrL2dtLCAnJyk7XG4gICAgICAgIFxuICAgICAgICAvLyBDbGVhbiB1cCBvdGhlciBtYXJrZG93biBmb3JtYXR0aW5nXG4gICAgICAgIHJlbWVkaWF0aW9uVGV4dCA9IHJlbWVkaWF0aW9uVGV4dFxuICAgICAgICAgIC8vIEJvbGQgdGV4dCAoKiogb3IgX18pXG4gICAgICAgICAgLnJlcGxhY2UoL1xcKlxcKihbXipdKylcXCpcXCovZywgJyQxJylcbiAgICAgICAgICAucmVwbGFjZSgvX18oW15fXSspX18vZywgJyQxJylcbiAgICAgICAgICAvLyBJdGFsaWMgdGV4dCAoKiBvciBfKVxuICAgICAgICAgIC5yZXBsYWNlKC9cXCooW14qXSspXFwqL2csICckMScpXG4gICAgICAgICAgLnJlcGxhY2UoL18oW15fXSspXy9nLCAnJDEnKVxuICAgICAgICAgIC8vIFN0cmlrZXRocm91Z2ggdGV4dCAofn4pXG4gICAgICAgICAgLnJlcGxhY2UoL35+KFtefl0rKX5+L2csICckMScpXG4gICAgICAgICAgLy8gSW5saW5lIGNvZGUgKGApXG4gICAgICAgICAgLnJlcGxhY2UoL2AoW15gXSspYC9nLCAnJDEnKVxuICAgICAgICAgIC8vIEJ1bGxldCBwb2ludHNcbiAgICAgICAgICAucmVwbGFjZSgvXlxccypbXFwqXFwtXFwrXVxccysvZ20sICfigKIgJylcbiAgICAgICAgICAvLyBOdW1iZXJlZCBsaXN0cyAoa2VlcCBudW1iZXJzIGJ1dCBzdGFuZGFyZGl6ZSBmb3JtYXQpXG4gICAgICAgICAgLnJlcGxhY2UoL15cXHMqXFxkK1xcLlxccysvZ20sIChtYXRjaCkgPT4gbWF0Y2gpO1xuICAgICAgICBcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHJlbWVkaWF0aW9uIHRleHQgY29udGFpbnMgc3RydWN0dXJlZCBzZWN0aW9uc1xuICAgICAgICBpZiAocmVtZWRpYXRpb25UZXh0LmluY2x1ZGVzKCcxLiBJbXBvcnRhbmNlIG9mIEZpeGluZycpIHx8IHJlbWVkaWF0aW9uVGV4dC5pbmNsdWRlcygnSW1wb3J0YW5jZSBvZiBGaXhpbmcnKSkge1xuICAgICAgICAgIC8vIEZvciBzdHJ1Y3R1cmVkIHJlbWVkaWF0aW9uIGZvcm1hdCAtIHJlbW92ZSBtYXJrZG93biBoZWFkZXJzIGFuZCBjbGVhbiB1cCBmb3JtYXR0aW5nXG4gICAgICAgICAgXG4gICAgICAgICAgLy8gU3BsaXQgYnkgc2VjdGlvbiBudW1iZXJzICgxLiwgMi4sIGV0Yy4pXG4gICAgICAgICAgY29uc3Qgc2VjdGlvbnMgPSByZW1lZGlhdGlvblRleHQuc3BsaXQoL1xcZCtcXC5cXHMrLyk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gSWYgdGhlIHNwbGl0IGRpZG4ndCB3b3JrIHdlbGwgKG9ubHkgb25lIHNlY3Rpb24pLCB0cnkgYW5vdGhlciBhcHByb2FjaFxuICAgICAgICAgIGlmIChzZWN0aW9ucy5sZW5ndGggPD0gMSkge1xuICAgICAgICAgICAgLy8gVHJ5IHNwbGl0dGluZyBieSBuZXdsaW5lIGZvbGxvd2VkIGJ5IGEgbnVtYmVyIGFuZCBwZXJpb2RcbiAgICAgICAgICAgIGNvbnN0IGFsdFNlY3Rpb25zID0gcmVtZWRpYXRpb25UZXh0LnNwbGl0KC9cXG5cXGQrXFwuXFxzKy8pO1xuICAgICAgICAgICAgaWYgKGFsdFNlY3Rpb25zLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgLy8gVXNlIHRoaXMgc3BsaXQgaW5zdGVhZFxuICAgICAgICAgICAgICBzZWN0aW9ucy5sZW5ndGggPSAwOyAvLyBDbGVhciB0aGUgYXJyYXlcbiAgICAgICAgICAgICAgYWx0U2VjdGlvbnMuZm9yRWFjaChzZWN0aW9uID0+IHNlY3Rpb25zLnB1c2goc2VjdGlvbikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICBsZXQgc2VjdGlvblkgPSBjdXJyZW50WVBvc2l0aW9uO1xuICAgICAgICAgIGNvbnN0IG1hcmdpbkJvdHRvbSA9IDIwOyAvLyBTcGFjZSB0byByZXNlcnZlIGF0IGJvdHRvbSBvZiBwYWdlXG4gICAgICAgICAgXG4gICAgICAgICAgLy8gUHJvY2VzcyBlYWNoIHNlY3Rpb24gYWZ0ZXIgdGhlIHNwbGl0IChza2lwIHRoZSBmaXJzdCBlbXB0eSBlbGVtZW50IGlmIGV4aXN0cylcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoc2VjdGlvbnNbaV0udHJpbSgpID09PSAnJykgY29udGludWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEV4dHJhY3Qgc2VjdGlvbiB0aXRsZSBhbmQgY29udGVudFxuICAgICAgICAgICAgY29uc3Qgc2VjdGlvblBhcnRzID0gc2VjdGlvbnNbaV0uc3BsaXQoJ1xcbicpO1xuICAgICAgICAgICAgLy8gQ2xlYW4gdXAgYW55IHJlbWFpbmluZyBtYXJrZG93biBmb3JtYXR0aW5nIGZyb20gc2VjdGlvbiB0aXRsZVxuICAgICAgICAgICAgY29uc3Qgc2VjdGlvblRpdGxlID0gc2VjdGlvblBhcnRzWzBdLnRyaW0oKS5yZXBsYWNlKC9eIytcXHMqL2csICcnKTtcbiAgICAgICAgICAgIGNvbnN0IHNlY3Rpb25Db250ZW50ID0gc2VjdGlvblBhcnRzLnNsaWNlKDEpLmpvaW4oJ1xcbicpLnRyaW0oKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byBhZGQgYSBuZXcgcGFnZSBiZWZvcmUgc3RhcnRpbmcgYSBuZXcgc2VjdGlvblxuICAgICAgICAgICAgaWYgKHNlY3Rpb25ZID4gcGFnZUhlaWdodCAtIDQwKSB7IC8vIExlYXZlIHNwYWNlIGZvciB0aXRsZSBhbmQgc29tZSBjb250ZW50XG4gICAgICAgICAgICAgIGRvYy5hZGRQYWdlKCk7XG4gICAgICAgICAgICAgIC8vIEFkZCBwYWdlIG51bWJlclxuICAgICAgICAgICAgICBjb25zdCBwYWdlTnVtYmVyID0gZG9jLmdldE51bWJlck9mUGFnZXMoKTtcbiAgICAgICAgICAgICAgZG9jLnNldEZvbnRTaXplKDEwKTtcbiAgICAgICAgICAgICAgZG9jLnRleHQoYFBhZ2UgJHtwYWdlTnVtYmVyfWAsIHBhZ2VXaWR0aCAtIDIwLCBwYWdlSGVpZ2h0IC0gMTApO1xuICAgICAgICAgICAgICBzZWN0aW9uWSA9IDIwOyAvLyBSZXNldCBwb3NpdGlvbiB0byB0b3Agb2YgbmV3IHBhZ2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQWRkIHNlY3Rpb24gdGl0bGUgd2l0aCBib2xkIHN0eWxpbmdcbiAgICAgICAgICAgIGRvYy5zZXRGb250KCdoZWx2ZXRpY2EnLCAnYm9sZCcpO1xuICAgICAgICAgICAgZG9jLnRleHQoc2VjdGlvblRpdGxlLCAxNCwgc2VjdGlvblkpO1xuICAgICAgICAgICAgZG9jLnNldEZvbnQoJ2hlbHZldGljYScsICdub3JtYWwnKTtcbiAgICAgICAgICAgIHNlY3Rpb25ZICs9IDc7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEFkZCBzZWN0aW9uIGNvbnRlbnQgd2l0aCBwcm9wZXIgZm9ybWF0dGluZ1xuICAgICAgICAgICAgY29uc3Qgc3BsaXRDb250ZW50ID0gZG9jLnNwbGl0VGV4dFRvU2l6ZShzZWN0aW9uQ29udGVudCwgcGFnZVdpZHRoIC0gMjgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDaGVjayBpZiBjb250ZW50IHdpbGwgZml0IG9uIGN1cnJlbnQgcGFnZVxuICAgICAgICAgICAgY29uc3QgY29udGVudEhlaWdodCA9IHNwbGl0Q29udGVudC5sZW5ndGggKiA3O1xuICAgICAgICAgICAgaWYgKHNlY3Rpb25ZICsgY29udGVudEhlaWdodCA+IHBhZ2VIZWlnaHQgLSBtYXJnaW5Cb3R0b20pIHtcbiAgICAgICAgICAgICAgLy8gQ29udGVudCB3b24ndCBmaXQgb24gY3VycmVudCBwYWdlXG4gICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBob3cgbWFueSBsaW5lcyB3aWxsIGZpdCBvbiBjdXJyZW50IHBhZ2VcbiAgICAgICAgICAgICAgY29uc3QgYXZhaWxhYmxlSGVpZ2h0ID0gcGFnZUhlaWdodCAtIG1hcmdpbkJvdHRvbSAtIHNlY3Rpb25ZO1xuICAgICAgICAgICAgICBjb25zdCBsaW5lc1BlclBhZ2UgPSBNYXRoLmZsb29yKGF2YWlsYWJsZUhlaWdodCAvIDcpO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgaWYgKGxpbmVzUGVyUGFnZSA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBBZGQgYXMgbWFueSBsaW5lcyBhcyB3aWxsIGZpdCBvbiBjdXJyZW50IHBhZ2VcbiAgICAgICAgICAgICAgICBjb25zdCBmaXJzdFBhZ2VMaW5lcyA9IHNwbGl0Q29udGVudC5zbGljZSgwLCBsaW5lc1BlclBhZ2UpO1xuICAgICAgICAgICAgICAgIGRvYy50ZXh0KGZpcnN0UGFnZUxpbmVzLCAxNCwgc2VjdGlvblkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAvLyBBZGQgYSBuZXcgcGFnZSBmb3IgcmVtYWluaW5nIGNvbnRlbnRcbiAgICAgICAgICAgICAgZG9jLmFkZFBhZ2UoKTtcbiAgICAgICAgICAgICAgLy8gQWRkIHBhZ2UgbnVtYmVyXG4gICAgICAgICAgICAgIGNvbnN0IHBhZ2VOdW1iZXIgPSBkb2MuZ2V0TnVtYmVyT2ZQYWdlcygpO1xuICAgICAgICAgICAgICBkb2Muc2V0Rm9udFNpemUoMTApO1xuICAgICAgICAgICAgICBkb2MudGV4dChgUGFnZSAke3BhZ2VOdW1iZXJ9YCwgcGFnZVdpZHRoIC0gMjAsIHBhZ2VIZWlnaHQgLSAxMCk7XG4gICAgICAgICAgICAgIGRvYy5zZXRGb250U2l6ZSgxMik7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAvLyBDb250aW51ZSB3aXRoIHJlbWFpbmluZyBjb250ZW50IG9uIG5ldyBwYWdlXG4gICAgICAgICAgICAgIGNvbnN0IHJlbWFpbmluZ0xpbmVzID0gc3BsaXRDb250ZW50LnNsaWNlKGxpbmVzUGVyUGFnZSA+IDAgPyBsaW5lc1BlclBhZ2UgOiAwKTtcbiAgICAgICAgICAgICAgaWYgKHJlbWFpbmluZ0xpbmVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBzZWN0aW9uWSA9IDIwOyAvLyBSZXNldCBwb3NpdGlvbiB0byB0b3Agb2YgbmV3IHBhZ2VcbiAgICAgICAgICAgICAgICBkb2MudGV4dChyZW1haW5pbmdMaW5lcywgMTQsIHNlY3Rpb25ZKTtcbiAgICAgICAgICAgICAgICBzZWN0aW9uWSArPSByZW1haW5pbmdMaW5lcy5sZW5ndGggKiA3ICsgMTA7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VjdGlvblkgPSAyMDsgLy8gUmVzZXQgcG9zaXRpb24gdG8gdG9wIG9mIG5ldyBwYWdlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIENvbnRlbnQgZml0cyBvbiBjdXJyZW50IHBhZ2VcbiAgICAgICAgICAgICAgZG9jLnRleHQoc3BsaXRDb250ZW50LCAxNCwgc2VjdGlvblkpO1xuICAgICAgICAgICAgICBzZWN0aW9uWSArPSBjb250ZW50SGVpZ2h0ICsgMTA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEhhbmRsZSBjb2RlIGV4YW1wbGVzIHdpdGggc3BlY2lhbCBmb3JtYXR0aW5nXG4gICAgICAgICAgICBpZiAoc2VjdGlvbkNvbnRlbnQuaW5jbHVkZXMoJ2BgYCcpKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRQYXJ0cyA9IHNlY3Rpb25Db250ZW50LnNwbGl0KC9gYGBcXHcqXFxuLyk7XG4gICAgICAgICAgICAgIGxldCBjb250ZW50WSA9IHNlY3Rpb25ZO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb250ZW50UGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaiAlIDIgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgIC8vIFJlZ3VsYXIgdGV4dFxuICAgICAgICAgICAgICAgICAgY29uc3QgcmVndWxhclRleHQgPSBjb250ZW50UGFydHNbal0udHJpbSgpO1xuICAgICAgICAgICAgICAgICAgaWYgKHJlZ3VsYXJUZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNwbGl0UmVndWxhciA9IGRvYy5zcGxpdFRleHRUb1NpemUocmVndWxhclRleHQsIHBhZ2VXaWR0aCAtIDI4KTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIGNvbnRlbnQgd2lsbCBmaXQgb24gY3VycmVudCBwYWdlXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250ZW50WSArIChzcGxpdFJlZ3VsYXIubGVuZ3RoICogNykgPiBwYWdlSGVpZ2h0IC0gbWFyZ2luQm90dG9tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIGEgbmV3IHBhZ2VcbiAgICAgICAgICAgICAgICAgICAgICBkb2MuYWRkUGFnZSgpO1xuICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCBwYWdlIG51bWJlclxuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2VOdW1iZXIgPSBkb2MuZ2V0TnVtYmVyT2ZQYWdlcygpO1xuICAgICAgICAgICAgICAgICAgICAgIGRvYy5zZXRGb250U2l6ZSgxMCk7XG4gICAgICAgICAgICAgICAgICAgICAgZG9jLnRleHQoYFBhZ2UgJHtwYWdlTnVtYmVyfWAsIHBhZ2VXaWR0aCAtIDIwLCBwYWdlSGVpZ2h0IC0gMTApO1xuICAgICAgICAgICAgICAgICAgICAgIGRvYy5zZXRGb250U2l6ZSgxMik7XG4gICAgICAgICAgICAgICAgICAgICAgY29udGVudFkgPSAyMDsgLy8gUmVzZXQgcG9zaXRpb24gdG8gdG9wIG9mIG5ldyBwYWdlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGRvYy50ZXh0KHNwbGl0UmVndWxhciwgMTQsIGNvbnRlbnRZKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudFkgKz0gc3BsaXRSZWd1bGFyLmxlbmd0aCAqIDc7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIC8vIENvZGUgZXhhbXBsZVxuICAgICAgICAgICAgICAgICAgY29uc3QgY29kZVRleHQgPSBjb250ZW50UGFydHNbal0uc3BsaXQoJ2BgYCcpWzBdLnRyaW0oKTtcbiAgICAgICAgICAgICAgICAgIGlmIChjb2RlVGV4dCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzcGxpdENvZGUgPSBkb2Muc3BsaXRUZXh0VG9TaXplKGNvZGVUZXh0LCBwYWdlV2lkdGggLSA0MCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvZGVIZWlnaHQgPSBzcGxpdENvZGUubGVuZ3RoICogNyArIDEwO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgY29kZSBibG9jayB3aWxsIGZpdCBvbiBjdXJyZW50IHBhZ2VcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnRZICsgY29kZUhlaWdodCA+IHBhZ2VIZWlnaHQgLSBtYXJnaW5Cb3R0b20pIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgYSBuZXcgcGFnZVxuICAgICAgICAgICAgICAgICAgICAgIGRvYy5hZGRQYWdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHBhZ2UgbnVtYmVyXG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFnZU51bWJlciA9IGRvYy5nZXROdW1iZXJPZlBhZ2VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgZG9jLnNldEZvbnRTaXplKDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICBkb2MudGV4dChgUGFnZSAke3BhZ2VOdW1iZXJ9YCwgcGFnZVdpZHRoIC0gMjAsIHBhZ2VIZWlnaHQgLSAxMCk7XG4gICAgICAgICAgICAgICAgICAgICAgZG9jLnNldEZvbnRTaXplKDEyKTtcbiAgICAgICAgICAgICAgICAgICAgICBjb250ZW50WSA9IDIwOyAvLyBSZXNldCBwb3NpdGlvbiB0byB0b3Agb2YgbmV3IHBhZ2VcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gRHJhdyBhIGxpZ2h0IGdyYXkgYmFja2dyb3VuZCBmb3IgY29kZVxuICAgICAgICAgICAgICAgICAgICBkb2Muc2V0RmlsbENvbG9yKDI0MCwgMjQwLCAyNDApO1xuICAgICAgICAgICAgICAgICAgICBkb2MucmVjdCgxNCwgY29udGVudFkgLSA1LCBwYWdlV2lkdGggLSAyOCwgY29kZUhlaWdodCwgJ0YnKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgY29kZSB3aXRoIG1vbm9zcGFjZSBmb250XG4gICAgICAgICAgICAgICAgICAgIGRvYy5zZXRGb250KCdjb3VyaWVyJywgJ25vcm1hbCcpO1xuICAgICAgICAgICAgICAgICAgICBkb2MudGV4dChzcGxpdENvZGUsIDIwLCBjb250ZW50WSk7XG4gICAgICAgICAgICAgICAgICAgIGRvYy5zZXRGb250KCdoZWx2ZXRpY2EnLCAnbm9ybWFsJyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRZICs9IGNvZGVIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHNlY3Rpb25ZID0gY29udGVudFkgKyAxMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgY3VycmVudFlQb3NpdGlvbiA9IHNlY3Rpb25ZO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEZvciBzaW1wbGUgdW5zdHJ1Y3R1cmVkIHJlbWVkaWF0aW9uIHRleHRcbiAgICAgICAgICAvLyBDbGVhbiB1cCBhbnkgbWFya2Rvd24gZm9ybWF0dGluZyBmcm9tIHVuc3RydWN0dXJlZCB0ZXh0XG4gICAgICAgICAgcmVtZWRpYXRpb25UZXh0ID0gcmVtZWRpYXRpb25UZXh0LnJlcGxhY2UoL14jIyNcXHMrL2dtLCAnJyk7XG4gICAgICAgICAgcmVtZWRpYXRpb25UZXh0ID0gcmVtZWRpYXRpb25UZXh0LnJlcGxhY2UoL14jIyMjXFxzKy9nbSwgJycpO1xuICAgICAgICAgIHJlbWVkaWF0aW9uVGV4dCA9IHJlbWVkaWF0aW9uVGV4dC5yZXBsYWNlKC9eI1xccysvZ20sICcnKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBDbGVhbiB1cCBvdGhlciBtYXJrZG93biBmb3JtYXR0aW5nIGZvciB1bnN0cnVjdHVyZWQgdGV4dFxuICAgICAgICAgIHJlbWVkaWF0aW9uVGV4dCA9IHJlbWVkaWF0aW9uVGV4dFxuICAgICAgICAgICAgLy8gQm9sZCB0ZXh0ICgqKiBvciBfXylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXCpcXCooW14qXSspXFwqXFwqL2csICckMScpXG4gICAgICAgICAgICAucmVwbGFjZSgvX18oW15fXSspX18vZywgJyQxJylcbiAgICAgICAgICAgIC8vIEl0YWxpYyB0ZXh0ICgqIG9yIF8pXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwqKFteKl0rKVxcKi9nLCAnJDEnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL18oW15fXSspXy9nLCAnJDEnKVxuICAgICAgICAgICAgLy8gU3RyaWtldGhyb3VnaCB0ZXh0ICh+filcbiAgICAgICAgICAgIC5yZXBsYWNlKC9+fihbXn5dKyl+fi9nLCAnJDEnKVxuICAgICAgICAgICAgLy8gSW5saW5lIGNvZGUgKGApXG4gICAgICAgICAgICAucmVwbGFjZSgvYChbXmBdKylgL2csICckMScpXG4gICAgICAgICAgICAvLyBCdWxsZXQgcG9pbnRzXG4gICAgICAgICAgICAucmVwbGFjZSgvXlxccypbXFwqXFwtXFwrXVxccysvZ20sICfigKIgJylcbiAgICAgICAgICAgIC8vIE51bWJlcmVkIGxpc3RzIChrZWVwIG51bWJlcnMgYnV0IHN0YW5kYXJkaXplIGZvcm1hdClcbiAgICAgICAgICAgIC5yZXBsYWNlKC9eXFxzKlxcZCtcXC5cXHMrL2dtLCAobWF0Y2gpID0+IG1hdGNoKTtcbiAgICAgICAgICBcbiAgICAgICAgICBjb25zdCBzcGxpdFJlbWVkaWF0aW9uID0gZG9jLnNwbGl0VGV4dFRvU2l6ZShyZW1lZGlhdGlvblRleHQsIHBhZ2VXaWR0aCAtIDI4KTtcbiAgICAgICAgICBjb25zdCByZW1lZGlhdGlvbkhlaWdodCA9IHNwbGl0UmVtZWRpYXRpb24ubGVuZ3RoICogNztcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBDaGVjayBpZiByZW1lZGlhdGlvbiB0ZXh0IHdpbGwgZml0IG9uIGN1cnJlbnQgcGFnZVxuICAgICAgICAgIGlmIChjdXJyZW50WVBvc2l0aW9uICsgcmVtZWRpYXRpb25IZWlnaHQgPiBwYWdlSGVpZ2h0IC0gMjApIHtcbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBob3cgbWFueSBsaW5lcyB3aWxsIGZpdCBvbiBjdXJyZW50IHBhZ2VcbiAgICAgICAgICAgIGNvbnN0IGF2YWlsYWJsZUhlaWdodCA9IHBhZ2VIZWlnaHQgLSAyMCAtIGN1cnJlbnRZUG9zaXRpb247XG4gICAgICAgICAgICBjb25zdCBsaW5lc1BlclBhZ2UgPSBNYXRoLmZsb29yKGF2YWlsYWJsZUhlaWdodCAvIDcpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAobGluZXNQZXJQYWdlID4gMCkge1xuICAgICAgICAgICAgICAvLyBBZGQgYXMgbWFueSBsaW5lcyBhcyB3aWxsIGZpdCBvbiBjdXJyZW50IHBhZ2VcbiAgICAgICAgICAgICAgY29uc3QgZmlyc3RQYWdlTGluZXMgPSBzcGxpdFJlbWVkaWF0aW9uLnNsaWNlKDAsIGxpbmVzUGVyUGFnZSk7XG4gICAgICAgICAgICAgIGRvYy50ZXh0KGZpcnN0UGFnZUxpbmVzLCAxNCwgY3VycmVudFlQb3NpdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEFkZCBhIG5ldyBwYWdlIGZvciByZW1haW5pbmcgY29udGVudFxuICAgICAgICAgICAgZG9jLmFkZFBhZ2UoKTtcbiAgICAgICAgICAgIC8vIEFkZCBwYWdlIG51bWJlclxuICAgICAgICAgICAgY29uc3QgcGFnZU51bWJlciA9IGRvYy5nZXROdW1iZXJPZlBhZ2VzKCk7XG4gICAgICAgICAgICBkb2Muc2V0Rm9udFNpemUoMTApO1xuICAgICAgICAgICAgZG9jLnRleHQoYFBhZ2UgJHtwYWdlTnVtYmVyfWAsIHBhZ2VXaWR0aCAtIDIwLCBwYWdlSGVpZ2h0IC0gMTApO1xuICAgICAgICAgICAgZG9jLnNldEZvbnRTaXplKDEyKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ29udGludWUgd2l0aCByZW1haW5pbmcgY29udGVudCBvbiBuZXcgcGFnZVxuICAgICAgICAgICAgY29uc3QgcmVtYWluaW5nTGluZXMgPSBzcGxpdFJlbWVkaWF0aW9uLnNsaWNlKGxpbmVzUGVyUGFnZSA+IDAgPyBsaW5lc1BlclBhZ2UgOiAwKTtcbiAgICAgICAgICAgIGlmIChyZW1haW5pbmdMaW5lcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRZUG9zaXRpb24gPSAyMDsgLy8gUmVzZXQgcG9zaXRpb24gdG8gdG9wIG9mIG5ldyBwYWdlXG4gICAgICAgICAgICAgIGRvYy50ZXh0KHJlbWFpbmluZ0xpbmVzLCAxNCwgY3VycmVudFlQb3NpdGlvbik7XG4gICAgICAgICAgICAgIGN1cnJlbnRZUG9zaXRpb24gKz0gcmVtYWluaW5nTGluZXMubGVuZ3RoICogNztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRZUG9zaXRpb24gPSAyMDsgLy8gUmVzZXQgcG9zaXRpb24gdG8gdG9wIG9mIG5ldyBwYWdlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIENvbnRlbnQgZml0cyBvbiBjdXJyZW50IHBhZ2VcbiAgICAgICAgICAgIGRvYy50ZXh0KHNwbGl0UmVtZWRpYXRpb24sIDE0LCBjdXJyZW50WVBvc2l0aW9uKTtcbiAgICAgICAgICAgIGN1cnJlbnRZUG9zaXRpb24gKz0gcmVtZWRpYXRpb25IZWlnaHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgXG4gIC8vIEFkZCBmb290ZXIgd2l0aCBnZW5lcmF0aW9uIGRhdGVcbiAgY29uc3QgcGFnZUNvdW50ID0gZG9jLmdldE51bWJlck9mUGFnZXMoKTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPD0gcGFnZUNvdW50OyBpKyspIHtcbiAgICBkb2Muc2V0UGFnZShpKTtcbiAgICBkb2Muc2V0Rm9udFNpemUoMTApO1xuICAgIGRvYy5zZXRUZXh0Q29sb3IoMTAwLCAxMDAsIDEwMCk7IC8vIEdyYXkgY29sb3JcbiAgICBkb2MudGV4dChgUmVwb3J0IGdlbmVyYXRlZCBvbiAke25ldyBEYXRlKCkudG9Mb2NhbGVTdHJpbmcoKX1gLCAxNCwgZG9jLmludGVybmFsLnBhZ2VTaXplLmdldEhlaWdodCgpIC0gMTApO1xuICB9XG4gIFxuICAvLyBSZXR1cm4gdGhlIFBERiBhcyBhIGJsb2JcbiAgcmV0dXJuIGRvYy5vdXRwdXQoJ2Jsb2InKTtcbn07Il0sIm5hbWVzIjpbImpzUERGIiwiYXV0b1RhYmxlIiwiZ2VuZXJhdGVQREZSZXBvcnQiLCJzY2FuIiwidnVsbmVyYWJpbGl0aWVzIiwiZG9jIiwicGFnZVdpZHRoIiwiaW50ZXJuYWwiLCJwYWdlU2l6ZSIsImdldFdpZHRoIiwic2V0Rm9udFNpemUiLCJzZXRUZXh0Q29sb3IiLCJ0ZXh0IiwiYWxpZ24iLCJ1cmwiLCJ0YXJnZXQiLCJzY2FuX3R5cGUiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwic3RhdHVzIiwiY3JlYXRlZF9hdCIsIkRhdGUiLCJ0b0xvY2FsZVN0cmluZyIsInN0YXJ0VGltZVZhbHVlIiwic3RhcnRfdGltZSIsInN0YXJ0ZWRfYXQiLCJlbmRUaW1lVmFsdWUiLCJlbmRfdGltZSIsImNvbXBsZXRlZF9hdCIsInN0YXJ0VGltZSIsImVuZFRpbWUiLCJnZXRUaW1lIiwidG9GaXhlZCIsInN1bW1hcnkiLCJ0b3RhbF92dWxuZXJhYmlsaXRpZXMiLCJzZXZlcml0eV9jb3VudHMiLCJzZXZlcml0eUNvdW50cyIsInN0YXJ0WSIsImhlYWQiLCJib2R5IiwiY3JpdGljYWwiLCJ0b1N0cmluZyIsImhpZ2giLCJtZWRpdW0iLCJsb3ciLCJpbmZvIiwidGhlbWUiLCJoZWFkU3R5bGVzIiwiZmlsbENvbG9yIiwiY29sdW1uU3R5bGVzIiwiY2VsbFdpZHRoIiwiaGFsaWduIiwibGVuZ3RoIiwiY3VycmVudFkiLCJwcmV2aW91c0F1dG9UYWJsZSIsImZpbmFsWSIsInRhYmxlUm93cyIsIm1hcCIsInZ1bG4iLCJuYW1lIiwic2V2ZXJpdHkiLCJsb2NhdGlvbiIsImRlc2NyaXB0aW9uIiwic3Vic3RyaW5nIiwiZGlkRHJhd1BhZ2UiLCJkYXRhIiwicGFnZU51bWJlciIsImdldE51bWJlck9mUGFnZXMiLCJnZXRIZWlnaHQiLCJmb3JFYWNoIiwiaW5kZXgiLCJhZGRQYWdlIiwiY3dlX2lkIiwiY3Zzc19zY29yZSIsInNwbGl0RGVzY3JpcHRpb24iLCJzcGxpdFRleHRUb1NpemUiLCJjdXJyZW50WVBvc2l0aW9uIiwiZXZpZGVuY2UiLCJzcGxpdEV2aWRlbmNlIiwicmVtZWRpYXRpb24iLCJwYWdlSGVpZ2h0IiwicmVtZWRpYXRpb25UZXh0IiwicmVwbGFjZSIsIm1hdGNoIiwiaW5jbHVkZXMiLCJzZWN0aW9ucyIsInNwbGl0IiwiYWx0U2VjdGlvbnMiLCJzZWN0aW9uIiwicHVzaCIsInNlY3Rpb25ZIiwibWFyZ2luQm90dG9tIiwiaSIsInRyaW0iLCJzZWN0aW9uUGFydHMiLCJzZWN0aW9uVGl0bGUiLCJzZWN0aW9uQ29udGVudCIsImpvaW4iLCJzZXRGb250Iiwic3BsaXRDb250ZW50IiwiY29udGVudEhlaWdodCIsImF2YWlsYWJsZUhlaWdodCIsImxpbmVzUGVyUGFnZSIsIk1hdGgiLCJmbG9vciIsImZpcnN0UGFnZUxpbmVzIiwicmVtYWluaW5nTGluZXMiLCJjb250ZW50UGFydHMiLCJjb250ZW50WSIsImoiLCJyZWd1bGFyVGV4dCIsInNwbGl0UmVndWxhciIsImNvZGVUZXh0Iiwic3BsaXRDb2RlIiwiY29kZUhlaWdodCIsInNldEZpbGxDb2xvciIsInJlY3QiLCJzcGxpdFJlbWVkaWF0aW9uIiwicmVtZWRpYXRpb25IZWlnaHQiLCJwYWdlQ291bnQiLCJzZXRQYWdlIiwib3V0cHV0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utils/pdfGenerator.ts\n"));

/***/ })

});