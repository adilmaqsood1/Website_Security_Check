"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "src_utils_pdfGenerator_ts";
exports.ids = ["src_utils_pdfGenerator_ts"];
exports.modules = {

/***/ "./src/utils/pdfGenerator.ts":
/*!***********************************!*\
  !*** ./src/utils/pdfGenerator.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generatePDFReport: () => (/* binding */ generatePDFReport)\n/* harmony export */ });\n/* harmony import */ var jspdf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jspdf */ \"jspdf\");\n/* harmony import */ var jspdf__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jspdf__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var jspdf_autotable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jspdf-autotable */ \"jspdf-autotable\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([jspdf_autotable__WEBPACK_IMPORTED_MODULE_1__]);\njspdf_autotable__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n/**\n * Generate a PDF report from scan data\n * @param scan The scan details\n * @param vulnerabilities List of vulnerabilities found in the scan\n * @returns Blob containing the PDF document\n */ const generatePDFReport = (scan, vulnerabilities = [])=>{\n    // Initialize PDF document\n    const doc = new jspdf__WEBPACK_IMPORTED_MODULE_0__.jsPDF();\n    const pageWidth = doc.internal.pageSize.getWidth();\n    // Add report title\n    doc.setFontSize(20);\n    doc.setTextColor(0, 51, 102); // Dark blue color\n    doc.text(\"Website Security Scan Report\", pageWidth / 2, 20, {\n        align: \"center\"\n    });\n    // Add scan information\n    doc.setFontSize(12);\n    doc.setTextColor(0, 0, 0); // Black color\n    doc.text(`URL: ${scan.url || scan.target || \"N/A\"}`, 14, 35);\n    doc.text(`Scan Type: ${scan.scan_type ? scan.scan_type.charAt(0).toUpperCase() + scan.scan_type.slice(1) : \"N/A\"}`, 14, 42);\n    doc.text(`Status: ${scan.status.charAt(0).toUpperCase() + scan.status.slice(1)}`, 14, 49);\n    doc.text(`Date: ${scan.created_at ? new Date(scan.created_at).toLocaleString() : \"N/A\"}`, 14, 56);\n    // Handle different time field names\n    const startTimeValue = scan.start_time || scan.started_at;\n    const endTimeValue = scan.end_time || scan.completed_at;\n    if (startTimeValue && endTimeValue) {\n        const startTime = new Date(startTimeValue);\n        const endTime = new Date(endTimeValue);\n        doc.text(`Duration: ${((endTime.getTime() - startTime.getTime()) / 1000 / 60).toFixed(2)} minutes`, 14, 63);\n    }\n    // Add summary section\n    doc.setFontSize(16);\n    doc.setTextColor(0, 51, 102); // Dark blue color\n    doc.text(\"Summary\", 14, 75);\n    if (scan.summary) {\n        doc.setFontSize(12);\n        doc.setTextColor(0, 0, 0); // Black color\n        doc.text(`Total Vulnerabilities: ${scan.summary.total_vulnerabilities}`, 14, 85);\n        // Add severity counts\n        if (scan.summary.severity_counts) {\n            const severityCounts = scan.summary.severity_counts;\n            // Create a table for severity counts\n            (0,jspdf_autotable__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(doc, {\n                startY: 95,\n                head: [\n                    [\n                        \"Severity\",\n                        \"Count\"\n                    ]\n                ],\n                body: [\n                    [\n                        \"Critical\",\n                        severityCounts.critical.toString()\n                    ],\n                    [\n                        \"High\",\n                        severityCounts.high.toString()\n                    ],\n                    [\n                        \"Medium\",\n                        severityCounts.medium.toString()\n                    ],\n                    [\n                        \"Low\",\n                        severityCounts.low.toString()\n                    ],\n                    [\n                        \"Info\",\n                        severityCounts.info.toString()\n                    ]\n                ],\n                theme: \"striped\",\n                headStyles: {\n                    fillColor: [\n                        0,\n                        51,\n                        102\n                    ]\n                },\n                columnStyles: {\n                    0: {\n                        cellWidth: 40\n                    },\n                    1: {\n                        cellWidth: 40,\n                        halign: \"center\"\n                    }\n                }\n            });\n        }\n    }\n    // Add vulnerabilities section if there are any\n    if (vulnerabilities.length > 0) {\n        // Get the position after the last table or use default value\n        const currentY = doc.previousAutoTable ? doc.previousAutoTable.finalY + 15 : 150;\n        doc.setFontSize(16);\n        doc.setTextColor(0, 51, 102); // Dark blue color\n        doc.text(\"Vulnerabilities\", 14, currentY);\n        // Create a table for vulnerabilities\n        const tableRows = vulnerabilities.map((vuln)=>[\n                vuln.name,\n                vuln.severity.charAt(0).toUpperCase() + vuln.severity.slice(1),\n                vuln.location,\n                vuln.description.length > 50 ? vuln.description.substring(0, 50) + \"...\" : vuln.description\n            ]);\n        (0,jspdf_autotable__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(doc, {\n            startY: currentY + 10,\n            head: [\n                [\n                    \"Name\",\n                    \"Severity\",\n                    \"Location\",\n                    \"Description\"\n                ]\n            ],\n            body: tableRows,\n            theme: \"striped\",\n            headStyles: {\n                fillColor: [\n                    0,\n                    51,\n                    102\n                ]\n            },\n            columnStyles: {\n                0: {\n                    cellWidth: 40\n                },\n                1: {\n                    cellWidth: 30\n                },\n                2: {\n                    cellWidth: 40\n                },\n                3: {\n                    cellWidth: \"auto\"\n                }\n            },\n            didDrawPage: (data)=>{\n                // Add page number at the bottom\n                const pageNumber = doc.getNumberOfPages();\n                doc.setFontSize(10);\n                doc.text(`Page ${pageNumber}`, pageWidth - 20, doc.internal.pageSize.getHeight() - 10);\n            }\n        });\n        // Add detailed vulnerability information\n        vulnerabilities.forEach((vuln, index)=>{\n            doc.addPage();\n            // Add page number\n            const pageNumber = doc.getNumberOfPages();\n            doc.setFontSize(10);\n            doc.text(`Page ${pageNumber}`, pageWidth - 20, doc.internal.pageSize.getHeight() - 10);\n            // Add vulnerability details\n            doc.setFontSize(16);\n            doc.setTextColor(0, 51, 102); // Dark blue color\n            doc.text(`Vulnerability #${index + 1}: ${vuln.name}`, 14, 20);\n            doc.setFontSize(12);\n            doc.setTextColor(0, 0, 0); // Black color\n            doc.text(`Severity: ${vuln.severity.charAt(0).toUpperCase() + vuln.severity.slice(1)}`, 14, 30);\n            doc.text(`Location: ${vuln.location}`, 14, 37);\n            if (vuln.cwe_id) {\n                doc.text(`CWE ID: ${vuln.cwe_id}`, 14, 44);\n            }\n            if (vuln.cvss_score) {\n                doc.text(`CVSS Score: ${vuln.cvss_score}`, 14, 51);\n            }\n            // Description with word wrap\n            doc.setFontSize(12);\n            doc.text(\"Description:\", 14, 58);\n            const splitDescription = doc.splitTextToSize(vuln.description, pageWidth - 28);\n            doc.text(splitDescription, 14, 65);\n            let currentYPosition = 65 + splitDescription.length * 7;\n            // Evidence with word wrap if available\n            if (vuln.evidence) {\n                doc.text(\"Evidence:\", 14, currentYPosition);\n                const splitEvidence = doc.splitTextToSize(vuln.evidence, pageWidth - 28);\n                doc.text(splitEvidence, 14, currentYPosition + 7);\n                currentYPosition += 7 + splitEvidence.length * 7;\n            }\n            // Enhanced remediation section with structured format\n            if (vuln.remediation) {\n                // Check if we need to add a new page for remediation section\n                const pageHeight = doc.internal.pageSize.getHeight();\n                if (currentYPosition > pageHeight - 60) {\n                    doc.addPage();\n                    // Add page number\n                    const pageNumber = doc.getNumberOfPages();\n                    doc.setFontSize(10);\n                    doc.text(`Page ${pageNumber}`, pageWidth - 20, pageHeight - 10);\n                    currentYPosition = 20; // Reset position to top of new page\n                }\n                // Main remediation heading\n                doc.setFontSize(14);\n                doc.setTextColor(0, 51, 102); // Dark blue color\n                doc.text(\"Remediation:\", 14, currentYPosition);\n                currentYPosition += 10;\n                // Reset to normal text style\n                doc.setFontSize(12);\n                doc.setTextColor(0, 0, 0); // Black color\n                // Parse the remediation text to identify sections and clean markdown formatting\n                let remediationText = vuln.remediation;\n                // Remove all markdown header formatting (# through ####)\n                remediationText = remediationText.replace(/^#{1,4}\\s+/gm, \"\");\n                // Clean up other markdown formatting\n                remediationText = remediationText// Bold text (** or __)\n                .replace(/\\*\\*([^*]+)\\*\\*/g, \"$1\").replace(/__([^_]+)__/g, \"$1\")// Italic text (* or _)\n                .replace(/\\*([^*]+)\\*/g, \"$1\").replace(/_([^_]+)_/g, \"$1\")// Strikethrough text (~~)\n                .replace(/~~([^~]+)~~/g, \"$1\")// Inline code (`)\n                .replace(/`([^`]+)`/g, \"$1\")// Bullet points\n                .replace(/^\\s*[\\*\\-\\+]\\s+/gm, \"• \")// Numbered lists (keep numbers but standardize format)\n                .replace(/^\\s*\\d+\\.\\s+/gm, (match)=>match);\n                // Check if the remediation text contains structured sections\n                if (remediationText.includes(\"1. Importance of Fixing\") || remediationText.includes(\"Importance of Fixing\")) {\n                    // For structured remediation format - remove markdown headers and clean up formatting\n                    // Split by section numbers (1., 2., etc.)\n                    const sections = remediationText.split(/\\d+\\.\\s+/);\n                    // If the split didn't work well (only one section), try another approach\n                    if (sections.length <= 1) {\n                        // Try splitting by newline followed by a number and period\n                        const altSections = remediationText.split(/\\n\\d+\\.\\s+/);\n                        if (altSections.length > 1) {\n                            // Use this split instead\n                            sections.length = 0; // Clear the array\n                            altSections.forEach((section)=>sections.push(section));\n                        }\n                    }\n                    let sectionY = currentYPosition;\n                    const marginBottom = 20; // Space to reserve at bottom of page\n                    // Process each section after the split (skip the first empty element if exists)\n                    for(let i = 0; i < sections.length; i++){\n                        if (sections[i].trim() === \"\") continue;\n                        // Extract section title and content\n                        const sectionParts = sections[i].split(\"\\n\");\n                        // Clean up any remaining markdown formatting from section title\n                        const sectionTitle = sectionParts[0].trim().replace(/^#+\\s*/g, \"\");\n                        const sectionContent = sectionParts.slice(1).join(\"\\n\").trim();\n                        // Check if we need to add a new page before starting a new section\n                        if (sectionY > pageHeight - 40) {\n                            doc.addPage();\n                            // Add page number\n                            const pageNumber = doc.getNumberOfPages();\n                            doc.setFontSize(10);\n                            doc.text(`Page ${pageNumber}`, pageWidth - 20, pageHeight - 10);\n                            sectionY = 20; // Reset position to top of new page\n                        }\n                        // Add section title with bold styling\n                        doc.setFont(\"helvetica\", \"bold\");\n                        doc.text(sectionTitle, 14, sectionY);\n                        doc.setFont(\"helvetica\", \"normal\");\n                        sectionY += 7;\n                        // Add section content with proper formatting\n                        const splitContent = doc.splitTextToSize(sectionContent, pageWidth - 28);\n                        // Check if content will fit on current page\n                        const contentHeight = splitContent.length * 7;\n                        if (sectionY + contentHeight > pageHeight - marginBottom) {\n                            // Content won't fit on current page\n                            // Calculate how many lines will fit on current page\n                            const availableHeight = pageHeight - marginBottom - sectionY;\n                            const linesPerPage = Math.floor(availableHeight / 7);\n                            if (linesPerPage > 0) {\n                                // Add as many lines as will fit on current page\n                                const firstPageLines = splitContent.slice(0, linesPerPage);\n                                doc.text(firstPageLines, 14, sectionY);\n                            }\n                            // Add a new page for remaining content\n                            doc.addPage();\n                            // Add page number\n                            const pageNumber = doc.getNumberOfPages();\n                            doc.setFontSize(10);\n                            doc.text(`Page ${pageNumber}`, pageWidth - 20, pageHeight - 10);\n                            doc.setFontSize(12);\n                            // Continue with remaining content on new page\n                            const remainingLines = splitContent.slice(linesPerPage > 0 ? linesPerPage : 0);\n                            if (remainingLines.length > 0) {\n                                sectionY = 20; // Reset position to top of new page\n                                doc.text(remainingLines, 14, sectionY);\n                                sectionY += remainingLines.length * 7 + 10;\n                            } else {\n                                sectionY = 20; // Reset position to top of new page\n                            }\n                        } else {\n                            // Content fits on current page\n                            doc.text(splitContent, 14, sectionY);\n                            sectionY += contentHeight + 10;\n                        }\n                        // Handle code examples with special formatting\n                        if (sectionContent.includes(\"```\")) {\n                            // Improved code block handling\n                            // Match code blocks with regex to properly capture content between backticks\n                            const codeBlockRegex = /```(?:\\w*)\\n([\\s\\S]*?)```/g;\n                            let lastIndex = 0;\n                            let contentY = sectionY;\n                            let match;\n                            // Process the content by finding all code blocks and handling text between them\n                            while((match = codeBlockRegex.exec(sectionContent)) !== null){\n                                // Handle text before the code block\n                                const textBeforeCode = sectionContent.substring(lastIndex, match.index).trim();\n                                if (textBeforeCode) {\n                                    const splitRegular = doc.splitTextToSize(textBeforeCode, pageWidth - 28);\n                                    // Check if content will fit on current page\n                                    if (contentY + splitRegular.length * 7 > pageHeight - marginBottom) {\n                                        // Add a new page\n                                        doc.addPage();\n                                        // Add page number\n                                        const pageNumber = doc.getNumberOfPages();\n                                        doc.setFontSize(10);\n                                        doc.text(`Page ${pageNumber}`, pageWidth - 20, pageHeight - 10);\n                                        doc.setFontSize(12);\n                                        contentY = 20; // Reset position to top of new page\n                                    }\n                                    doc.text(splitRegular, 14, contentY);\n                                    contentY += splitRegular.length * 7 + 5; // Add a small gap\n                                }\n                                // Handle the code block\n                                const codeText = match[1].trim();\n                                if (codeText) {\n                                    const splitCode = doc.splitTextToSize(codeText, pageWidth - 40);\n                                    const codeHeight = splitCode.length * 7 + 10;\n                                    // Check if code block will fit on current page\n                                    if (contentY + codeHeight > pageHeight - marginBottom) {\n                                        // Add a new page\n                                        doc.addPage();\n                                        // Add page number\n                                        const pageNumber = doc.getNumberOfPages();\n                                        doc.setFontSize(10);\n                                        doc.text(`Page ${pageNumber}`, pageWidth - 20, pageHeight - 10);\n                                        doc.setFontSize(12);\n                                        contentY = 20; // Reset position to top of new page\n                                    }\n                                    // Draw a light gray background for code\n                                    doc.setFillColor(240, 240, 240);\n                                    doc.rect(14, contentY - 5, pageWidth - 28, codeHeight, \"F\");\n                                    // Add the code with monospace font\n                                    doc.setFont(\"courier\", \"normal\");\n                                    doc.text(splitCode, 20, contentY);\n                                    doc.setFont(\"helvetica\", \"normal\");\n                                    contentY += codeHeight + 5; // Add a small gap\n                                }\n                                lastIndex = match.index + match[0].length;\n                            }\n                            // Handle any remaining text after the last code block\n                            const textAfterLastCode = sectionContent.substring(lastIndex).trim();\n                            if (textAfterLastCode) {\n                                const splitRegular = doc.splitTextToSize(textAfterLastCode, pageWidth - 28);\n                                // Check if content will fit on current page\n                                if (contentY + splitRegular.length * 7 > pageHeight - marginBottom) {\n                                    // Add a new page\n                                    doc.addPage();\n                                    // Add page number\n                                    const pageNumber = doc.getNumberOfPages();\n                                    doc.setFontSize(10);\n                                    doc.text(`Page ${pageNumber}`, pageWidth - 20, pageHeight - 10);\n                                    doc.setFontSize(12);\n                                    contentY = 20; // Reset position to top of new page\n                                }\n                                doc.text(splitRegular, 14, contentY);\n                                contentY += splitRegular.length * 7;\n                            }\n                            sectionY = contentY + 10;\n                        }\n                    }\n                    currentYPosition = sectionY;\n                } else {\n                    // For simple unstructured remediation text\n                    // Clean up any markdown formatting from unstructured text\n                    remediationText = remediationText.replace(/^###\\s+/gm, \"\");\n                    remediationText = remediationText.replace(/^####\\s+/gm, \"\");\n                    remediationText = remediationText.replace(/^#\\s+/gm, \"\");\n                    // Clean up other markdown formatting for unstructured text\n                    remediationText = remediationText// Bold text (** or __)\n                    .replace(/\\*\\*([^*]+)\\*\\*/g, \"$1\").replace(/__([^_]+)__/g, \"$1\")// Italic text (* or _)\n                    .replace(/\\*([^*]+)\\*/g, \"$1\").replace(/_([^_]+)_/g, \"$1\")// Strikethrough text (~~)\n                    .replace(/~~([^~]+)~~/g, \"$1\")// Inline code (`)\n                    .replace(/`([^`]+)`/g, \"$1\")// Bullet points\n                    .replace(/^\\s*[\\*\\-\\+]\\s+/gm, \"• \")// Numbered lists (keep numbers but standardize format)\n                    .replace(/^\\s*\\d+\\.\\s+/gm, (match)=>match);\n                    // Handle code blocks in unstructured text\n                    if (remediationText.includes(\"```\")) {\n                        // Use the same improved code block handling as in structured sections\n                        const codeBlockRegex = /```(?:\\w*)\\n([\\s\\S]*?)```/g;\n                        let lastIndex = 0;\n                        let contentY = currentYPosition;\n                        let match;\n                        let processedText = \"\";\n                        // Process the content by finding all code blocks and handling text between them\n                        while((match = codeBlockRegex.exec(remediationText)) !== null){\n                            // Add text before the code block to processed text\n                            processedText += remediationText.substring(lastIndex, match.index);\n                            // Handle the code block\n                            const codeText = match[1].trim();\n                            if (codeText) {\n                                // Add a new page if needed\n                                if (contentY > pageHeight - 60) {\n                                    doc.addPage();\n                                    // Add page number\n                                    const pageNumber = doc.getNumberOfPages();\n                                    doc.setFontSize(10);\n                                    doc.text(`Page ${pageNumber}`, pageWidth - 20, pageHeight - 10);\n                                    doc.setFontSize(12);\n                                    contentY = 20; // Reset position to top of new page\n                                }\n                                // Handle text before code block\n                                const textBeforeCode = remediationText.substring(lastIndex, match.index).trim();\n                                if (textBeforeCode) {\n                                    const splitRegular = doc.splitTextToSize(textBeforeCode, pageWidth - 28);\n                                    doc.text(splitRegular, 14, contentY);\n                                    contentY += splitRegular.length * 7 + 5; // Add a small gap\n                                }\n                                const splitCode = doc.splitTextToSize(codeText, pageWidth - 40);\n                                const codeHeight = splitCode.length * 7 + 10;\n                                // Check if code block will fit on current page\n                                if (contentY + codeHeight > pageHeight - 20) {\n                                    // Add a new page\n                                    doc.addPage();\n                                    // Add page number\n                                    const pageNumber = doc.getNumberOfPages();\n                                    doc.setFontSize(10);\n                                    doc.text(`Page ${pageNumber}`, pageWidth - 20, pageHeight - 10);\n                                    doc.setFontSize(12);\n                                    contentY = 20; // Reset position to top of new page\n                                }\n                                // Draw a light gray background for code\n                                doc.setFillColor(240, 240, 240);\n                                doc.rect(14, contentY - 5, pageWidth - 28, codeHeight, \"F\");\n                                // Add the code with monospace font\n                                doc.setFont(\"courier\", \"normal\");\n                                doc.text(splitCode, 20, contentY);\n                                doc.setFont(\"helvetica\", \"normal\");\n                                contentY += codeHeight + 5; // Add a small gap\n                            }\n                            lastIndex = match.index + match[0].length;\n                        }\n                        // Handle any remaining text after the last code block\n                        const textAfterLastCode = remediationText.substring(lastIndex).trim();\n                        if (textAfterLastCode) {\n                            const splitRegular = doc.splitTextToSize(textAfterLastCode, pageWidth - 28);\n                            // Check if content will fit on current page\n                            if (contentY + splitRegular.length * 7 > pageHeight - 20) {\n                                // Add a new page\n                                doc.addPage();\n                                // Add page number\n                                const pageNumber = doc.getNumberOfPages();\n                                doc.setFontSize(10);\n                                doc.text(`Page ${pageNumber}`, pageWidth - 20, pageHeight - 10);\n                                doc.setFontSize(12);\n                                contentY = 20; // Reset position to top of new page\n                            }\n                            doc.text(splitRegular, 14, contentY);\n                            contentY += splitRegular.length * 7;\n                        }\n                        currentYPosition = contentY;\n                    } else {\n                        // No code blocks, handle as regular text\n                        const splitRemediation = doc.splitTextToSize(remediationText, pageWidth - 28);\n                        const remediationHeight = splitRemediation.length * 7;\n                        // Check if remediation text will fit on current page\n                        if (currentYPosition + remediationHeight > pageHeight - 20) {\n                            // Calculate how many lines will fit on current page\n                            const availableHeight = pageHeight - 20 - currentYPosition;\n                            const linesPerPage = Math.floor(availableHeight / 7);\n                            if (linesPerPage > 0) {\n                                // Add as many lines as will fit on current page\n                                const firstPageLines = splitRemediation.slice(0, linesPerPage);\n                                doc.text(firstPageLines, 14, currentYPosition);\n                            }\n                            // Add a new page for remaining content\n                            doc.addPage();\n                            // Add page number\n                            const pageNumber = doc.getNumberOfPages();\n                            doc.setFontSize(10);\n                            doc.text(`Page ${pageNumber}`, pageWidth - 20, pageHeight - 10);\n                            doc.setFontSize(12);\n                            // Continue with remaining content on new page\n                            const remainingLines = splitRemediation.slice(linesPerPage > 0 ? linesPerPage : 0);\n                            if (remainingLines.length > 0) {\n                                currentYPosition = 20; // Reset position to top of new page\n                                doc.text(remainingLines, 14, currentYPosition);\n                                currentYPosition += remainingLines.length * 7;\n                            } else {\n                                currentYPosition = 20; // Reset position to top of new page\n                            }\n                        } else {\n                            // Content fits on current page\n                            doc.text(splitRemediation, 14, currentYPosition);\n                            currentYPosition += remediationHeight;\n                        }\n                    }\n                }\n            }\n        });\n    }\n    // Add footer with generation date\n    const pageCount = doc.getNumberOfPages();\n    for(let i = 1; i <= pageCount; i++){\n        doc.setPage(i);\n        doc.setFontSize(10);\n        doc.setTextColor(100, 100, 100); // Gray color\n        doc.text(`Report generated on ${new Date().toLocaleString()}`, 14, doc.internal.pageSize.getHeight() - 10);\n    }\n    // Return the PDF as a blob\n    return doc.output(\"blob\");\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/pdfGenerator.ts\n");

/***/ })

};
;